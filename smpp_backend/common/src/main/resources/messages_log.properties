
# Messages for logger
#login service Exception Message
auth.successful=Authentication successful for user :{}
auth.failed.userNotFound=Authentication failed. User not found:{}
auth.failed.password=Authentication failed. Invalid password for the user:{}
log.attemptAuth=Attempting to authenticate for user:{}
log.internalServerError=Internal server error during authentication 

<<<<<<< HEAD
#MobileDb Service Logger message
mobileDb.enter.addMobileDbData = Entering addMobileData method
mobileDb.addDataEntry.getAge=  Add Mobile Data Age of the user is :{}
mobileDb.getUsername = Provided user name is :{}
# Message related to file format
file.format=File format: {}
# Messages related to save operation
mobileDb.saveSuccess=Successfully inserted mobile data into the database
mobileDb.saveFailure=Failed to insert mobile data into the database
mobileDb.addMobileData.exiting=Exiting addMobileData method
mobileDb.addMobileData.nullValues=One or More Values are Null or Incorrect in addMobileData Function
# Message related to showing mobile data
mobileDb.showData.mobileNumber=Mobile number received in showMobileData method:{}
mobileDb.showData.mobileNumberNotFound=Mobile number not found in the database: {}
mobileDb.showData.success=Successfully retrieved mobile data from the database
mobileDb.showData.failure=Failed to retrieve mobile data from the database
# Error message for exceptions
mobileDb.showData.exception=Error in showMobileData method: {}
# Messages related to updating mobile data list
mobileDb.updateDataList.nullArrays=One or more arrays are null in UpdateMobiledatalist  Method
mobileDb.updateDataList.success=Successfully updated mobile data list
mobileDb.updateDataList.failure=Failed to update mobile data list
mobileDb.updateDataList.noSuchElementError=Entry with given id is not present
mobileDb.updateDataList.exception=Error in updateMobileDataList method: {}
# Messages related to deleting mobile data list
mobileDb.deleteDataList.checkedC=Checked counts: {}
mobileDb.deleteDataList.success=Successfully deleted mobile data list
mobileDb.deleteDataList.failure=Failed to delete mobile data list
mobileDb.deleteDataList.noSuchElementError=Entry with given id not present
mobileDb.deleteDataList.arrayIndexOutOfBoundsError=Count of entry mobile ID and Check_Count does not match
mobileDb.deleteDataList.exception=Error in deleteMobileDataList method: {}
# Messages related to choosing mobile numbers
mobileDb.chooseRequired.smsCount=SMS Count - {}
mobileDb.chooseRequired.smsCountOutOfBounds=SMS count is out of bounds
mobileDb.chooseRequired.parseError=Error parsing integer
mobileDb.chooseRequired.sendNowSmsCountError=Send Now SMS Count is more than the number list count
mobileDb.chooseRequired.exception=Error in chooseRequired method: {}
# Messages related to editing data
mobileDb.editData.info=EditDataAction Called
mobileDb.editData.exception=Error in editData method: {}
# Messages related to getting sub-areas
mobileDb.getSubArea.info=Area - {}
mobileDb.getSubArea.subAreas=Sub Areas :: {}
mobileDb.getSubArea.subAreaDoesNotExist=Subarea Does not exist for the given area
mobileDb.getSubArea.exception=Error in getSubArea method: {}
mobileDb.mobileUserList.numberFormatException=Error parsing number: {}
mobileDb.mobileUserList.generalException=Exception in uploading number: {}
mobileDb.mobileUserList.SaveContactList=Error In Saving Multiple Conacts From List: {}

# Log messages for mobileUserList method
mobileDb.enter.mobileUserList=Entering mobileUserList method.
mobileDb.intermediate.ageRange=Age range: {}
mobileDb.intermediate.areaArrayLength=Area array length: {}
mobileDb.intermediate.subareaArrayLength=Subarea array length: {}
mobileDb.intermediate.professionArrayLength=Profession array length: {}
mobileDb.intermediate.classTypeArrayLength=ClassType array length: {}
mobileDb.intermediate.executingQuery=Executing query: {}
mobileDb.error.mobileUserList=Error in mobileUserList method: {} - {}
mobileDb.exit.mobileUserList = Exit mobileUserList Function

# Add more keys as needed for additional log messages

mobileDb.enter.mobileUserListInfo=  Entered into Mobile user List Info Function
mobileDb.success.mobileUserListInfo = Successfully fetched Data
mobileDb.failure.mobileUserListInfo= Failed to fetch Data
mobileDb.userId.queryForMobileRecord = User ID
mobileDb.webEntryOptional.queryForMobileRecord= Web Entry Reached 
mobileDb.success.queryForMobileRecord= Successfully fetched Data
mobileDb.failed.queryForMobileRecord=Failed to fetch Data
mobileDb.NumberFormatException.SendAreaWiseSms= NumberFormatException
mobileDb.finalList.SendAreaWiseSms=finalList


=======
#bsfm logger
bsfm.add.msg={} [{}] Add Spam Profile: {}
bsfm.noUser={} [{}] No User Selected For The Operation.
bsfm.msg.error= Error Message: {}
bsfm.add.success=Bsfm Profile added successfully: {}
bsfm.failed.duplicate=Duplicate Entry Found! Failed to add Bsfm Profile: {}
bsfm.add.failed=Failed to add Bsfm Profile: {}
bsfm.req.check=Checked Request By username: {} userid: {}
bsfm.req.edit={} Edit Profile Request: {}
bsfm.invalid.network={} [{}] Invalid Network {}
bsfm.is.scheduled={} isSchedule: {}
bsfm.day.time={} day_time_token: {}
bsfm.invalid.day={} Invalid Day: {}
bsfm.invalid.schToken={} Invalid Schedule token: {}
bsfm.show.success=Bsfm profiles listed successfully for user: {}
bsfm.show.failed = No Bsfm profiles available for user: {}
bsfm.update.profile={} [{}] Update Spam Profile: {}
bsfm.invalid.daytime= {} Invalid DayTime Configured: {}
bsfm.update.success=Spam Profile updated successfully: {}
bsfm.update.failed=Failed to update Spam Profile: {}
bsfm.duplicate.profilename=Duplicate Bsfm Profile with profilename: {}
bsfm.noProfile.exist=No Bsfm Profile exists with Id: {}
bsfm.delete.error=Error deleting BsfmActiveProfile {}
bsfm.req.delete=Delete request by username: {}
bsfm.delete.success=Spam Profile deleted successfully!
bsfm.delete.failed = Failed to delete Spam Profile!
bsfm.req.updateFlag=Update Bsfm profile flag requested by: {}
bsfm.updateFlag.success=Flag value change: Success
bsfm.updateFlag.failed=Flag value change: Failure

#sales logger
sales.req.add = Sales User [{}-{}] Add Requested By {} [{}]
sales.warn.user=Usermaster Entry Exists With same Username {}
sales.add.success=Sales User Created With Id: {}. Status: {}
sales.add.failure=Unable to create Sales User: {}
sales.msg.error = Unexpected Error: {}

>>>>>>> b562506d7fe493f576acff08340c1381683f7f5e

#template
add.template.req=Add Template Request By userId: {} Title: {} Message: {}
process.error=Process Error: {} [{}]
add.template.success=Add Template Request Successful by userId: {} Title: {} Message: {}
processing.error=Processing Error
get.template.req=Get Template Request By userId: {} Template Id: {}
get.template.success=Get Template Request Successful By userId: {} Template Id: {}
error.processing.template=Error Processing Template by id: {}
get.all.templates.req=Get All Templates Requested by userId: {}
error.processing.templates=Error processing templates: {}
get.all.templates.success=Get all templates request successful for userId: {}
error.processing.get.all.templates=Error Processing Request for Get All Templates.
update.template.req=Update template request by userId: {} title: {} message: {}
no.template.to.update=No template to update for userId: {}
update.template.success=Update Template Request Successful: {} Title: {} Message: {}
delete.template.info=userId: {} delete templateId: {}
template.deleted.success=Template deleted successful with id: {}
delete.template.error=Delete templateId: {} <-- No template to delete -->
recent.use.template.success=RecentUseTemplate operation succeeded for user: {}
unexpected.error=An unexpected error occurred: {} {} 


