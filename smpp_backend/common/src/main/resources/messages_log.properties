# Messages for logger
#login service Exception Message
auth.successful=Authentication successful for user :{}
auth.failed.userNotFound=Authentication failed. User not found:{}
auth.failed.password=Authentication failed. Invalid password for the user:{}
log.attemptAuth=Attempting to authenticate for user:{}
log.internalServerError=Internal server error during authentication 
internal.server.error=Internal server error ,Authentication failed  :{} 
user.account.expired = <- User Account Expired -> {}
user.password.expired = <- User Password Expired -> {}
user.account.blocked = {} Blocked By Flag <404>
user.flag.value = {} Flag ====> {}
user.flag.read.error = <-- {} Flag Read Error -->
user.check.ipaddress = {} <-- Checking For AccessIP -->
user.local.ip.match = {} Local AccessIp Matched: {}
user.matching.super.access.ip.info = {} Matching[{}] From Super Access IP list
user.range.matched.info = {} Range[{}] Matched: {}
user.configured.ip.matched.info = {} Configured[{}] Ip Matched: {}
user.matching.global.access.ip.info = {} Matching[{}] From Global Access IP list
user.access.ip.not.matched.info = {} Access IP Not Matched: {}
user.matching.allowed.country.info = {} Matching[{}] From Allowed Country list
user.country.found.info = {} Country [{}] found in database: {}
user.country.not.found.info = {} Country [{}] not found in database.
user.access.ip.not.allowed.info = {} Access IP Not Allowed: {}
user.valid.access.country.info = {} Valid Access Country: {}
user.access.countries.not.configured.info = {} Access Countries Not Configured.
user.valid.access.ip.info = {} Valid Access IP: {}
user.access.ip.not.configured.info = {} Access IP Address Not Configured.
user.multi.user.access.enabled.info = {} Multi User Access Enabled.
user.no.multi.access.name.found.info = {} No Multi Access Name Found
user.otp.number.info = {} OTP Number: {}
user.invalid.otp.number.error = {} Invalid OTP Number Configured: {}
user.valid.otp.numbers.info = {} Valid OTP Numbers: {}
user.no.otp.entry.found.info = No OTP entry found for the user!
user.otp.expired.on.info = {} OTP ExpiredOn: {}
user.otp.format.error = OTP_FORMAT (unable to read otp.txt file): {}
user.domain.email.found.info = {} Domain-Email Found: {}
user.master.domain.email.found.info = {} Master Domain-Email Found: {}
user.domain.email.not.found.info = {} Domain-Email Not Found
user.sending.otp.email.info = {} Sending OTP Email From[{}] on: {}
user.otp.already.generated.info = Otp already generated!
user.otp.number.not.configured.error = {} OTP Number Not Configured.
user.web.access.denied.info = Web Access Denied User -> {} Password -> {}
user.invalid.credentials.error = Invalid Credentials! Unable to validate User.


#MobileDb Service Logger message
mobileDb.enter.addMobileDbData = Entering addMobileData method
mobileDb.addDataEntry.getAge=  Add Mobile Data Age of the user is :{}
mobileDb.getUsername = Provided user name is :{}
# Message related to file format
file.format=File format: {}
# Messages related to save operation
mobileDb.saveSuccess=Successfully inserted mobile data into the database
mobileDb.saveFailure=Failed to insert mobile data into the database
mobileDb.addMobileData.exiting=Exiting addMobileData method
mobileDb.addMobileData.nullValues=One or More Values are Null or Incorrect in addMobileData Function
# Message related to showing mobile data
mobileDb.showData.mobileNumber=Mobile number received in showMobileData method:{}
mobileDb.showData.mobileNumberNotFound=Mobile number not found in the database: {}
mobileDb.showData.success=Successfully retrieved mobile data from the database
mobileDb.showData.failure=Failed to retrieve mobile data from the database
# Error message for exceptions
mobileDb.showData.exception=Error in showMobileData method: {}
# Messages related to updating mobile data list
mobileDb.updateDataList.nullArrays=One or more arrays are null in UpdateMobiledatalist  Method
mobileDb.updateDataList.success=Successfully updated mobile data list
mobileDb.updateDataList.failure=Failed to update mobile data list
mobileDb.updateDataList.noSuchElementError=Entry with given id is not present
mobileDb.updateDataList.exception=Error in updateMobileDataList method: {}
# Messages related to deleting mobile data list
mobileDb.deleteDataList.checkedC=Checked counts: {}
mobileDb.deleteDataList.success=Successfully deleted mobile data list
mobileDb.deleteDataList.failure=Failed to delete mobile data list
mobileDb.deleteDataList.noSuchElementError=Entry with given id not present
mobileDb.deleteDataList.arrayIndexOutOfBoundsError=Count of entry mobile ID and Check_Count does not match
mobileDb.deleteDataList.exception=Error in deleteMobileDataList method: {}
# Messages related to choosing mobile numbers
mobileDb.chooseRequired.smsCount=SMS Count - {}
mobileDb.chooseRequired.smsCountOutOfBounds=SMS count is out of bounds
mobileDb.chooseRequired.parseError=Error parsing integer
mobileDb.chooseRequired.sendNowSmsCountError=Send Now SMS Count is more than the number list count
mobileDb.chooseRequired.exception=Error in chooseRequired method: {}
# Messages related to editing data
mobileDb.editData.info=EditDataAction Called
mobileDb.editData.exception=Error in editData method: {}
# Messages related to getting sub-areas
mobileDb.getSubArea.info=Area - {}
mobileDb.getSubArea.subAreas=Sub Areas :: {}
mobileDb.getSubArea.subAreaDoesNotExist=Subarea Does not exist for the given area
mobileDb.getSubArea.exception=Error in getSubArea method: {}
mobileDb.mobileUserList.numberFormatException=Error parsing number: {}
mobileDb.mobileUserList.generalException=Exception in uploading number: {}
mobileDb.mobileUserList.SaveContactList=Error In Saving Multiple Conacts From List: {}

# Log messages for mobileUserList method
mobileDb.enter.mobileUserList=Entering mobileUserList method.
mobileDb.intermediate.ageRange=Age range: {}
mobileDb.intermediate.areaArrayLength=Area array length: {}
mobileDb.intermediate.subareaArrayLength=Subarea array length: {}
mobileDb.intermediate.professionArrayLength=Profession array length: {}
mobileDb.intermediate.classTypeArrayLength=ClassType array length: {}
mobileDb.intermediate.executingQuery=Executing query: {}
mobileDb.error.mobileUserList=Error in mobileUserList method: {} - {}
mobileDb.exit.mobileUserList = Exit mobileUserList Function

# Add more keys as needed for additional log messages
mobileDb.enter.mobileUserListInfo=  Entered into Mobile user List Info Function
mobileDb.success.mobileUserListInfo = Successfully fetched Data
mobileDb.failure.mobileUserListInfo= Failed to fetch Data
mobileDb.userId.queryForMobileRecord = User ID
mobileDb.webEntryOptional.queryForMobileRecord= Web Entry Reached 
mobileDb.success.queryForMobileRecord= Successfully fetched Data
mobileDb.failed.queryForMobileRecord=Failed to fetch Data
mobileDb.NumberFormatException.SendAreaWiseSms= NumberFormatException
mobileDb.finalList.SendAreaWiseSms=finalList

#bsfm logger
bsfm.add.msg={} [{}] Add Spam Profile: {}
bsfm.noUser={} [{}] No User Selected For The Operation.
bsfm.msg.error= Error Message: {}
bsfm.add.success=Bsfm Profile added successfully: {}
bsfm.failed.duplicate=Duplicate Entry Found! Failed to add Bsfm Profile: {}
bsfm.add.failed=Failed to add Bsfm Profile: {}
bsfm.req.check=Checked Request By username: {} userid: {}
bsfm.req.edit={} Edit Profile Request: {}
bsfm.invalid.network={} [{}] Invalid Network {}
bsfm.is.scheduled={} isSchedule: {}
bsfm.day.time={} day_time_token: {}
bsfm.invalid.day={} Invalid Day: {}
bsfm.invalid.schToken={} Invalid Schedule token: {}
bsfm.show.success=Bsfm profiles listed successfully for user: {}
bsfm.show.failed = No Bsfm profiles available for user: {}
bsfm.update.profile={} [{}] Update Spam Profile: {}
bsfm.invalid.daytime= {} Invalid DayTime Configured: {}
bsfm.update.success=Spam Profile updated successfully: {}
bsfm.update.failed=Failed to update Spam Profile: {}
bsfm.duplicate.profilename=Duplicate Bsfm Profile with profilename: {}
bsfm.noProfile.exist=No Bsfm Profile exists with Id: {}
bsfm.delete.error=Error deleting BsfmActiveProfile {}
bsfm.req.delete=Delete request by username: {}
bsfm.delete.success=Spam Profile deleted successfully!
bsfm.delete.failed = Failed to delete Spam Profile!
bsfm.req.updateFlag=Update Bsfm profile flag requested by: {}
bsfm.updateFlag.success=Flag value change: Success
bsfm.updateFlag.failed=Flag value change: Failure

#sales logger
sales.req.add = Sales User [{}-{}] Add Requested By {} [{}]
sales.warn.user=Usermaster Entry Exists With same Username {}
sales.add.success=Sales User Created With Id: {}. Status: {}
sales.add.failure=Unable to create Sales User: {}
sales.msg.error = Unexpected Error: {}

sales.update.req = Executive [{}] Update Requested By {} [{}]
sales.updateRequest = Update Requested: {}
sales.entry.notfound = Sales Entry not found with id: {}
sales.update.success = Sales Entry Updated successfully! Status: {}
sales.update.failure = Unable to update SalesEntry: {}
sales.req.delete= Delete Requested for Sale ID: {}
sales.operation.success = Operation successful: Sale ID {}
sales.req.list = Executive List Requested By {} [{}]
sales.list.users = Executives Under [{}] : {}
sales.list.nousers=No Executive Found Under {} | {}
sales.view.req = Executive[{}] Details Requested By {} [{}]
sales.manager.noentry = No Sales Entry Found For The Role Manager!
sales.setup.req = Sales User Setup Requested By {} [{}]

#dlt service loggers
dlt.saveDltEntry.enter=Entered in saveDltEntry
dlt.saveDltEntry.userid ={}[{}] Add DltEntry Request:{}
dlt.saveDltEntry.dltEntry=DltEntry Added:{}
dlt.saveDltEntry.success=Dlt Entry Added Successfully
dlt.saveDltEntry.error=Error Occured While Processing
dlt.saveDltEntry.dlt.saveDltEntry.DataIntegrity.error=DataIntegrity Violation Exception error Occurred
dlt.saveDltEntry.Exception.error = An error occurred while saving DltEntry to the repository {}
dlt.addDltTemplate.enter =Entered in addDltTemplate
dlt.addDltTemplate.entry ={}[{}]
dlt.addDltTemplate.systemid ={}[{}] Add Dlt Template Request:{}
dlt.addDltTemplate.firstSheet ={} Sheet[0] Total Rows:{}
dlt.addDltTemplate.Invalid =Invalid Format For Xls File
dlt.addDltTemplate.getRowNum ={}[PE_ID]Invalid Char found[{}]{}
dlt.addDltTemplate.PE_ID =Invalid PE_ID For Entry[{}]{}
dlt.addDltTemplate.Template_ID]Invalid ={}[Template_ID]Invalid Char found[{}]{}
dlt.addDltTemplate.Template_ID =Invalid Template_ID For Entry[{}]{}
dlt.addDltTemplate.invalid.template =Invalid Template For Entry[{}]{}
dlt.addDltTemplate.getRow.template ={}: peId={},templateId={},template={}
dlt.addDltTemplate.error.dltentry =An error occurred while processing DltEntry.
dlt.addDltTemplate.Request.template ={}[{}]Add Dlt Template Request:{}
dlt.addDltTemplate.empty.template =<--- Dlt Templates empty -->
dlt.addDltTemplate.entries.template = Dlt Template entries:{}
dlt.addDltTemplate.Inserted.template =Dlt Template Inserted:{}
dlt.addDltTemplate.Successfully.template =Data Added to List Successfully
dlt.addDltTemplate.userRole.template ={}[] Add Dlt Template Target:{}
dlt.listDltEntry.enter =Entered in listDltEntry
dlt.listDltEntry.DltEntry ={}[{}]list DltEntry Request
dlt.listDltEntry.List = DltEntry List:{}
dlt.listDltEntry.DltEntry.target ={}[{}] list DltEntry Target:{}
dlt.listDltEntry.error =No data is Avaliable in the template list
dlt.listDltTemplate.enter=Entered in listDltTemplate
dlt.listDltTemplate.Template.request={}[{}]list Dlt Template Request
dlt.listDltTemplate.Template.list=Dlt Template List:{}
dlt.listDltTemplate.Template.Target={}[{}] list Dlt Template Target: {}
dlt.listDltTemplate.noRecord=No Record Avaliable
dlt.updateDltEntry.enter=Entered in updateDltEntry
dlt.updateDltEntry.Update.userDetail={}[{}] Update DltEntry Request:{}
dlt.updateDltEntry.success=Entry Updated Successfully
dlt.updateDltEntry.Target={}[{}] Update DltEntry Target:{}
dlt.updateDltTemplate.enter=Entered in updateDltTemplate
dlt.updateDltTemplate.Template.user={}[{}] Update Dlt Template Request: {}
dlt.updateDltTemplate.success=Template Updated Successfully 
dlt.updateDltTemplate.Target={}[{}] Update Dlt Template Target:{}
dlt.deleteDltEntry.success=Entry Deleted Successfully
dlt.deleteDltTemplate.success = Template Deleted Successfully
dlt.deleteDltTemplate.target = {}[{}] Remove Dlt Template Target:{}
dlt.getDltEntry.DltEntry = {}[{}] View DltEntry Request:{}
dlt.getDltEntry.target = {}[{}]  View DltEntry Target::{}
dlt.getDltTemplate.Request = {}[{}] View Dlt Template Request::{}
dlt.getDltTemplate.Target = {}[{}]  View Dlt Template Target::{}

#template
add.template.req=Add Template Request By userId: {} Title: {} Message: {}
process.error=Process Error: {} [{}]
add.template.success=Add Template Request Successful by userId: {} Title: {} Message: {}
processing.error=Processing Error
get.template.req=Get Template Request By userId: {} Template Id: {}
get.template.success=Get Template Request Successful By userId: {} Template Id: {}
error.processing.template=Error Processing Template by id: {}
get.all.templates.req=Get All Templates Requested by userId: {}
error.processing.templates=Error processing templates: {}
get.all.templates.success=Get all templates request successful for userId: {}
error.processing.get.all.templates=Error Processing Request for Get All Templates.
update.template.req=Update template request by userId: {} title: {} message: {}
no.template.to.update=No template to update for userId: {}
update.template.success=Update Template Request Successful: {} Title: {} Message: {}
delete.template.info=userId: {} delete templateId: {}
template.deleted.success=Template deleted successful with id: {}
delete.template.error=Delete templateId: {} <-- No template to delete -->
recent.use.template.success=RecentUseTemplate operation succeeded for user: {}
unexpected.error=An unexpected error occurred: {} {} 

#subscription logger
subscription.add.req = Add Subcription page Request By {} Name: {} Sender: {}
subscription.header.upload = {} Header File Uploaded: {}
subscription.header.created = {} Header File Created: {}
subscription.footer.upload = {} Footer File Uploaded: {}
subscription.footer.created = {} Footer File Created: {}
subscription.invalid.cc = {} Invalid Country Code: {}
subscription.saved.success = Subscription Entry Saved Successfully!
subscription.saved.failure = Error saving subscription entry
subscription.contact.failure = Process Error: Contact Group not created!
subscription.dir.created =Subscription Directory Created!
subscription.file.saved = File saved successfully at: {}
subscription.file.deleted = File deleted successfully: {}
subscription.file.notexist = File does not exist: {}
subscription.view.req = View Subcription Page[{}] Request By {}
subscription.msg.noentry = {} --No Subscription Entry found."
subscription.msg.found = {} Subscribe Entry Found: {}
subscription.msg.error = Error Message: {}
subscription.req.list=List Subcription page Request By {}
subscription.entries= {} Subscribe Entries: {}
subscription.req.update = Update Subcription Page[{}] Request By {}
subscription.update.success = Subscribe Entry Updated Successfully!
subscription.update.failed = Failed Updating SubscribeEntry!
subscription.req.delete = Delete Subcription Page[{}] Request By {}
subscription.delete.success = Subscribe Entry Deleted Successfully!

#network logger
network.not.single = Check MCC not selected to single
network.saved.success = NetworkEntry Saved in DB Successful!
network.total.record = Total Inserted Records: {}
network.saved.failure = Failed to enter NetworkEntries in Database. Internal Server Error!
network.remaining = Remaining Records: {}
network.msg.error = Process Error: {}
network.msg.update = Message: Network Updated Successfully!
network.record.updated = Total Updated Records: {}
network.record.unavailable = Record Unavailable!
network.entry.notfound = Network Entry not found with id: {}
network.deleted.record = Deleted Records: {}
network.record.notfound = Total records found: {}
network.map.norecord = No record found in network map!
network.update.failure = Update Failure With Remaining Records: {}

#addressbook logger
addbook.contact.addreq = {} [{}] Adding Contact To Group: {}
addbook.invalid.entryformat = Invalid Format For Entry[{}]: {}
addbook.email.truncate.info = {} Email need to truncate: {}
addbook.error.message = Error Message: {}
addbooksheet.total.rows.info = Sheet[0] Total Rows: {}
addbook.invalid.xls.format.warn = Invalid Format For Xls File!
addbook.invalid.number.entry.warn = Invalid Number For Entry[{}]: {}
addbook.truncate.email.info = {} Email need to truncate: {}
addbook.invalid.number.error = Invalid Number Found: {}
addbook.contactentry.saved.info = ContactEntry Saved Successfully. Message: {}
addbook.no.template.exist.info = NO Template Exist!
addbook.configured.senders.info = {} Configured Senders: {}
addbook.no.senders.configured.error = No Senders Configured
addbook.webmaster.entry.notfound.error = {} Webmaster Entry Not Found!
addbook.no.record.found.error = No Record Found For Selected Criteria
addbook.list.contact.bulk.info = List Contact For Bulk Request by {}
addbook.proceed.contact.bulk.info = Proceed Contact For Bulk Request by {}
addbook.modify.contact.request.info = {}[{}] Modify Contact Request For GroupId: {}
addbook.update.list.empty.error = Update List is Empty. Error while updating data.
addbook.modify.contact.status.info = {} Modify Contact Status: {}
addbook.contact.deleted.info = Deleted contacts by {}: {}
addbook.contact.failed.deletion.warn = Failed to delete contacts by {} Id's: {}
addbook.start.creating.workbook.info = Start Creating WorkBook.
addbook.contact.workbook.created.info = Contact Workbook Created
addbook.export.contact.request.info = {}[{}] Export Contact Request For GroupId: {}
addbook.creating.contact.xlsx.info = {} Creating Contact XLSx
addbook.export.contact.target.info = {} Export Contact Target: {}
addbook.contact.xlsx.download.error = Contact XLSx Download Error: {}
addbook.listing.contactentry.info = Listing ContactEntry for Group : {} page request: {}
addbook.adding.groupdata.info = {}[{}] Adding GroupData To Group: {}
addbook.row.cell.counter.info = Row [{}] Cell Counter: {}
addbook.groupdata.entry.list.empty.error = Group Data Entry list is empty! No data Found To Save!, Status: {}
addbook.groupdata.entry.saved.info = GroupDataEntry Saved Successfully. Status: {}
addbook.groupdata.list.bulk.info = List Group Data[{}] For Bulk Request by {}
addbook.groupdata.send.request.info = Send Group Data[{}] Request by {}
addbook.groupdata.update.request.info = Group Data Update Request by {}
addbook.groupdata.modify.entry.info = {} Modify GroupDataEntry: Update Status: {}
addbook.groupdata.export.request.info = Group Data Export Request by {}
addbook.groupdata.creating.xlsx.info = {} Creating GroupData XLSx
addbook.groupdata.search.request.info = {}[{}] Search GroupData Request For Group: {}
addbook.groupdata.listing.info = Listing GroupData for Group : {} page request: {}
addbook.group.add.contact.request.info = {}[{}] Add Contact Group Request
addbook.group.invalid.name.warn = [{}] Invalid Group Name: {}
addbook.group.no.valid.entry.error = SystemID: [{}] No Valid Entry Found!
addbook.group.add.contact.status.info = {}: Add Contact Group Status: {}
addbook.group.modify.contact.request.info = {}[{}] Modify Contact Group Request
addbook.group.modify.contact.status.info = {} Modify Contact Group. Status: {}
addbook.groupdata.no.entry.found.info = No GroupDataEntry Found For the Group!
addbook.contact.no.entry.found.info = No ContactEntry Found For The Group!
addbook.group.remove.contact.request.info = {}[{}] Remove Contact Group Request
addbook.group.remove.contact.status.info = {} Remove Contact Group. Status: {}
addbook.group.invalid.request.error = {}[{}] <- Invalid Request ->
addbook.group.setup.contacts.target.info = Setup Contacts Group Target: {}

#hlr-smsc logs
hlr.smsc.saved.successfully.info = HlrSmscEntry saved successfully with ID: {}
hlr.smsc.save.error = Error occurred while saving HlrSmscEntry: {}
hlr.smsc.convert.error = Error occurred while converting HlrSmscEntryRequest to HlrSmscEntry: {}
hlr.smsc.convert.success = Converted HlrSmscEntryRequest to HlrSmscEntry successfully
hlr.smsc.not.found.warn = HlrSmscEntry with ID {} and systemId {} not found
hlr.smsc.updated.successfully.info = HlrSmscEntry updated successfully with ID: {}
hlr.smsc.update.data.access.error = DataAccessError occurred while updating HlrSmscEntry with ID {}: {}
hlr.smsc.update.error = Error occurred while updating HlrSmscEntry with ID {}: {}
hlr.smsc.deleted.successfully.info = HlrSmscEntry with ID {} deleted successfully


#Report Message Logger
auth.failed.userNotFound = SMS Latency report not found for username: {}
invalid.argument = Invalid argument: {}
unexpected.error = Unexpected error occurred: {}
batch.aborted.report.check = Checking for Batch Aborted Report...
batch.aborted.report.size = Batch Aborted report: {}

report.size.view.message=ReportSize[View]: Report for user {}: {}
report.finished.message=Report Finished for user with System ID: {}
under.users.message=User: {} Under Users: {}
preparing.report.data.message=Preparing Report Data for user with System ID: {}
fetching.campaign.report.error=An error occurred while fetching the campaign report.
processing.entries.message=Start Processing Entries for {}: {}
end.processing.entries.message=End Processing Entries for {}
prepared.list.message=Prepared List for user with System ID {}: {}
checking.systemId.message=Checking for systemId: {} From: {} To: {}
campaign.entries.message=Campaign entries: {}
campaign.report.message=Campaign[{}] Report: {}

sms.latency.report.notFound=SMS Latency report not found for username: {}
report.size.doc.message=ReportSize[doc] for user with System ID {}: {}

preparing.outputstream.message=Preparing Outputstream for user with System ID {}
xls.report.finished.message=XLS Report Finished for user with System ID {}
error.message=Error occurred for user with System ID {}: {}

preparing.charts.message=Preparing Charts for user with System ID {}

finished.charts.message= Charts Complete for user with System ID {}
creating.virtualizer.message=Creating Virtualizer for user with System ID {}
display.cost.message=Displaying Cost for user with System ID {}: {}
filling.report.data.message=Filling Report Data for user with System ID {}
filling.completed.message= Report Data Filling Completed for user with System ID {}
report.size.pdf.message=ReportSize[pdf] for user with System ID {}: {}
pdf.report.finished.message=PDF Report Finished for user with System ID {}
xls.report.size.message=ReportSize[xls] for user with System ID {}: {}
creating.zip.folder.message=Creating Zip Folder for user with System ID {}
starting.zip.download.message=Zip Downloading start for user with System ID {}
zip.report.finished.message=Zip Report Finished for user with System ID {}
creating.xls.message=Creating XLS for user with System ID {}
reading.xls.message=Reading XLS for user with System ID {}
time.gmt.message=Time conversion: To GMT: {}, From GMT: {}
report.sql.message=Report SQL for user with System ID {}: {}
end.criteria.report.message=End Based On Criteria. Final Report Size for user with System ID {}: {}
error.message=Error occurred with message ID {}: {}
sql.message=SQL Query for report user {}: {}
sql.error.message=Error occurred for report user {}: {}
report.list.size.message=Report list size for report user {}: {}
starting.xls.download.message=Starting XLS Download for user with System ID {}
dlr.xlsreport.error.message=DLR XLSReport Error for user with System ID {}
no.records.found.message=No Records Found for user with System ID {}

creating.doc.message=Creating DOC for user with System ID {}
user.days.message=User with System ID {} requested data for {} days
invalid.seller.id.message=Invalid seller ID for user with System ID {}: {}
user.found.under.seller.message=User with System ID {} found under Seller ID {}: {}
dashboard.report.last.days.message=Getting Dashboard Report for last {} days for user with System ID {}
invalid.seller.id.message=Invalid seller ID for user with System ID {}: {}
country.counter.message=Country Counter for user with System ID {}: {}
sender.count.message=Sender Count for user with System ID {}: {}
user.processing.info.message=User with System ID {} - Username: {} -> Received: {}, Processed: {}, Delivered: {}
userwise.counter.message=User-wise Counter for user with System ID {}: {}
smsc.counter.message=SmscCounter for user with System ID {}: {}
smsc.deliver.message=SmscDeliver for user with System ID {}: {}
no.delivery.found.message=No Delivery Found for user with System ID {}: {}
smsc.spam.message=SmscSpam for user with System ID {}: {}
smsc.spam.count.message=Smsc Spam Count for user with System ID {}: {}
user.spam.message=UserSpam for user with System ID {}: {}
user.spam.count.message=User Spam Count for user with System ID {}: {}
finished.dashboard.message=Finished Dashboard for user with System ID {}
getting.recent.dashboard.report.message=Getting Recent Dashboard Report for user with System ID {} and Role {}
dashboard.sql.message=Dashboard SQL for user with System ID {}: {}
dashboard.report.list.size.message=Dashboard Report List Size for user with System ID {}: {}
dashboard.report.message=Getting Dashboard Report for user with System ID {} for the last {} days
user.delivery.status.message=User Delivery Status for user with System ID {}: Received: {}, Processed: {}, Delivered: {}
database.error.message=An error occurred while executing a database operation: {}
empty.error.message=An error occurred: {}

creating.docx.message=Creating DOCX for user: {}
docx.outputstream.closing.error.message=DOCX OutputStream is Closing Error

xls.outputstream.error.message=XLS OutputStream closing error for user: {}
creating.report.list.message=Creating report list for user: {}
custom.report.dto.message=Custom report DTO for user: {} - {}
report.criteria.message=Report based on criteria for user: {}
under.users.message={}: Under Users: {}
checking.report.message={} Checking Report For {}
report.sql.message={} Report SQL: {}
end.criteria.report.size.message={} End Based On Criteria. Final Report Size: {}
report.list.count.message=Report List Count: {}
missing.tables.message= <-- {} Mis & Content Table Doesn't Exist -->

preparing.report.message={} <-- Preparing report -->

jasperreports.exception.message=JasperReports Exception occurred: {}
checking.report.for.message={} Checking Report For {}
end.criteria.final.size.message=End Based On Criteria. Final Report Size: {}

error.empty.message=An error occurred.
report.users.message= {} Report Users {}
user.list.size= {} User list: {}

report.size=Report Size: {}

zip.download.start= <--  Zip Download is being starting --> 
download.start= <---- Download is getting starting -----> 
xls.download.error=lookup XlsReport Download Stream Error: {}
stream.release.error=Major Error Releasing Streams: {}

finish.message= <-- Task has been Finished --> 
prepare.outputstream= <--Outputstream is on the way for preparing --> 

pdf.outputstream.error=Error occurred while processing PDF output stream.
doc.outputstream.error=Error occurred while processing document output stream.
xls.outputstream.error=Error occurred while processing XLS output stream.

recheck.lookup.size=Rechecking Lookup Size: {}
creating.workbook.message=<<-- Creating WorkBook -->> 
creating.sheet.message=Creating Sheet: {}
sheet.created.message=Sheet has been Created: {}

workbook.created.message=<<--- Workbook has been Created ---->>
creating.pdf.message=<<-- PDF is on the way for creating -->>
creating.doc.message=<<-- DOC is on the way for creating -->>

#performance Report
profit.report.entries.message=ProfitReport Entries: {}
schedule.history.report.message=Schedule History report: {}
sql.query.error.message=Error in SQL query {}
sql.error.message=Error in SQL for user with userID {}: {}
sql.message= The SQL statemenet is: {}

creating.design.message=Creating Designs
invalid.groupby.message=Invalid Operation for GroupBy: {}
processing.report.data.message=<<-- Processing report data -->>

#Profit Report
pdf.outputstream.closing.error.message=PDF OutputStream Closing Error for user with username :{}
doc.outputstream.closing.error.message=DOC OutputStream Closing Error for user with username :{}

no.report.data.found.message=S <<-- No Report Data Found for the user with username :{} -->>
listing.profit.result.entries.message=Listing Profit Result Entries: {}
compiling.source.format.message=<<-- Compiling Source Format file -->>
preparing.chart.data.message=<<-- Preparing Chart Data -->>

compiling.message=<<--- Compiling --->
preparing.chart.message=<<-- Preparing Charts -->>

#SMSC Message
smsc.in.message=Smsc_in: {}
smscin.log.message=smscin_log: {}
smscin.record.size.message=SmscIn Record Size: {}
mis.message=mis: {}
routing.sql.message=RoutingSQL: {}

#Summary Report 
no.users.found.error=No Users Found Under the user {} [{}]
no.user.found.message={}[{}] No User Found
batch.report.requested.message={} Batch Report Requested Based On Criteria
run.summary.report.view.message=run 120 in summary report view
compiling.source.format.message=<<-- Compiling Source Format file -->>

#Submission Report 
submission.report.requested.message={} Submission Report Requested.
report.info.message={} Report Type: {} User: {} Smsc: {} Country: {} Sender: {} Status: {}
checking.mis.records.message={} Checking For MIS Records
mis.log.criteria.message=Days difference under MIS log criteria. mis_table_log will be checked.
not.mis.log.criteria.message=Days difference is not under MIS log criteria
days.difference.check.message={} while Checking days difference.
checking.mis.records.all.users.message={} Checking MIS Records For All Users
checking.mis.records.for.user.message=Checking MIS Records For: {}
no.checking.from.mis.table.message=No Checking From mis_table
submit.report.processing.message=SubmitReport Processing For: {}
sql.get.submission.report.message=SQL getSubmissionReport --> {}
difference.from.today.message={} Difference From Today: {}
report.view.size.message=report not found content {},{}


#route service
error.record.unavailable=Error: Record unavailable
copy.route.check=Checking Copy Route for SubUser: {} {}
auto.copy.route.enabled=Auto Copy Route Enabled For SubUser: {} {}
invalid.margin={} Invalid margin: {}
subuser.already.has.network={} SubUser[{}] Already Has Network: {}
add.routing.users={} Add Routing Users: {}
remove.routing.entries={} Remove Routing Entries: {}
routing.entries.not.found=Routing Entries Not Found For {}
listing.route.entries=Listing Route Entries From Database: {}
cached.entry.not.found={} Cached Entry Not Found
user.entry.not.found=UserEntry Not Found: {}
optional.routing.scheduled.date={} Optional Routing Scheduled Date is Before Current Date
optional.routing.not.scheduled={} Optional Routing Not Scheduled For Today
optional.routing.scheduled.today={} Optional Routing Scheduled For Today
data.access.exception=Data Access Exception: {}
schedule.successful=Schedule Successful.
routing.configured.successful=Routing Configured Successful!
optional.route.undo.records=OptionalRoute Undo Records: {}
optional.route.update.size=Optional Route Update Size: {}
optional.route.log.requested=Optional Route Log Requested By {}
already.has.network={} Already Has Network: {}
checking.routing.entries={} Checking For Routing Entries
skipping.copy.routing=Skipping Copy Routing For: {}
skipping.copy.routing.for.exist=Skipping Copy Routing For Exist: {}
copy.routing.entries={} To be Copied Routing Entries: {}
all.routing.entries.deleted={} All Routing Entries Deleted
all.routing.copied={} All Routing Copied
download.routing.requested=Download Routing Requested By {} [{}]
download.routinglist.size={} Download Routinglist Size: {}
starting.routing.xlsx.download={} Starting Routing xlsx Download
routing.xlsx.download.error={} Routing XLSx Download Error: {}
error.record.unavailable.routing.list.empty=Error: Record unavailable. Routing list empty.
routing.workbook.created=Routing Workbook Created
routing.user.list.request=Routing User list Request For {} By {}
routing.user.list.request.target=Routing User list Request Target: {}
user.entries.found=UserEntries Found Under Seller({}): {}
expiry.parse.error={} Expiry Parse Error: {}
route.entries.search.request={} [{}] RouteEntries Search Request Using Advanced Criteria
already.has.network={} Already Has Network: {}
lookup.route.entries.search.request={} [{}] Lookup RouteEntries Search Request Using Advanced Criteria
edit.routing.users={} [{}] Edit Routing Users: {}
basic.routing.not.scheduled={} Basic Routing Not Scheduled For Today
basic.routing.scheduled.today={} Basic Routing Scheduled For Today
routemaster.scheduled.update.task.end={} Routemaster Scheduled Update Task End
schedule.configured.successfully=Schedule configured successfully!
remove.route.check=Checking Remove Route for SubUser: {} {}
auto.remove.route.enabled=Auto Remove Route Enabled For SubUser: {} {}
hlr.routing.scheduled.date={} Hlr Routing Scheduled Date is Before Current Date
edit.hlr.routing.users={} [{}] Edit Hlr Routing Users: {}
hlr.routing.not.scheduled={} Hlr Routing Not Scheduled For Today
hlr.routing.scheduled.today={} Hlr Routing Scheduled For Today
no.records.found=No Records Found to Proceed
hlr.route.update.size=HlrRoute Update Size: {}
hlr.route.log.requested=Hlr Route Log Requested By {} [{}]
route.log.requested=Route Log Requested By {} [{}]

#two-way logger
twoway.setup.keyword.request.info = {} Setup Keyword Request: {}
twoway.keyword.entry.saved.successfully.info = Keyword entry saved successfully.
twoway.keyword.already.exist.error = {} Keyword Already Exist
twoway.unauthorized.access.error = Unauthorized Access: {} [{}]
twoway.process.error = Process Error: {} [{}]
twoway.add.keyword.target.info = {} Add Keyword Target: {}
twoway.list.keyword.request.info = {} List Keyword Request
twoway.keyword.list.info = {} Keyword List: {}
twoway.keyword.list.empty.error = {} Keyword List Empty
twoway.update.keyword.request.info = {} Update Keyword Request: {}
twoway.delete.keyword.request.info = {} Delete Keyword Request: {}
twoway.view.keyword.request.info = {} View Keyword Request: {}
twoway.report.not.found.error = Report not found


# S M S C
smscentry.saved.successfully=SmscEntry saved successfully with id: {}
smscentry.save.error=An error occurred while saving the SmscEntry: {}
smscentry.updated.successfully=SmscEntry with ID {} has been successfully updated.
update.error=An error occurred during the update operation: {} {}
smscentry.deleted.successfully=SmscEntry with ID {} has been successfully deleted.
delete.error=An error occurred during the delete operation: {}
retrieve.customentry.error=Unknown error occurred while retrieving CustomEntry: {}
save.customentry.data.access.error=A data access error occurred while saving the CustomEntry: {} {}
save.customentry.unexpected.error=An unexpected error occurred while saving the CustomEntry: {} {}
customentry.updated.successfully=CustomEntry updated successfully
update.customentry.data.access.error=A data access error occurred while updating the CustomEntry: {} {}
update.customentry.unexpected.error=An unexpected error occurred while updating the CustomEntry: {} {}
customentry.deleted.successfully=CustomEntry deleted successfully
delete.customentry.data.access.error=A data access error occurred while deleting the CustomEntry: {} {}
delete.customentry.unexpected.error=An unexpected error occurred while deleting the CustomEntry: {} {}
limitentry.saved.successfully=LimitEntry Saved Successfully!
save.limitentry.data.access.error=A data access error occurred while saving the LimitEntry: {} {}
save.limitentry.unexpected.error=An unexpected error occurred while saving the LimitEntry: {} {}
limitid.updated.successfully=LimitId: {} Updated Successfully!
update.limitentry.data.access.error=A data access error occurred while updating the LimitEntry: {} {}
update.limitentry.unexpected.error=An unexpected error occurred while updating the LimitEntry: {} {}
limitentry.deleted.successfully=LimitEntry with ID {} deleted successfully
delete.limitentry.data.access.error=A data access error occurred while deleting the LimitEntry: {} {}
delete.limitentry.unexpected.error=An unexpected error occurred while deleting the LimitEntry: {} {}
fetch.limitentries.data.access.error=A data access error occurred while fetching the list of Limit Entries: {} {}
save.groupentry.data.access.error=A data access error occurred while saving the GroupEntry: {} {}
save.groupentry.unexpected.error=An unexpected error occurred while saving the GroupEntry: {} {}
groupentry.updated.successfully=GroupEntry updated successfully with Id: {}
group.not.found=Group not found with id: {}
update.groupentry.data.access.error=A data access error occurred while updating the GroupEntry: {} {}
update.groupentry.unexpected.error=An unexpected error occurred while updating the GroupEntry: {} {}
group.deleted.successfully=Group with ID {} has been deleted successfully.
delete.groupentry.data.access.error=A data access error occurred while deleting the GroupEntry: {} {}
group.not.found.e=Group not found: {} {}
delete.groupentry.unexpected.error=An unexpected error occurred while deleting the GroupEntry: {} {}
fetch.groupentries.unexpected.error=An unexpected error occurred while fetching the list of Group Entries: {} {}
groupmemberentry.saved.successfully=GroupMemberEntry Saved Successfully!
save.groupmemberentry.data.access.error=A data access error occurred while saving the GroupMemberEntry: {} {}
save.groupmemberentry.unexpected.error=An unexpected error occurred while saving the GroupMemberEntry: {} {}
update.groupmemberentry.data.access.error=A data access error occurred while updating the GroupMemberEntry: {} {}
update.groupmemberentry.unexpected.error=An unexpected error occurred while updating the GroupMemberEntry: {} {}
groupmember.deleted.successfully=Group member with ID {} has been deleted successfully.
groupmember.not.found.exception=Group member not found exception: {}
trafficschedule.saved.successfully=Traffic schedule saved with id: {}
save.trafficscheduleentry.data.access.error=A data access error occurred while saving the TrafficScheduleEntry: {} {}
save.trafficscheduleentry.unexpected.error=An unexpected error occurred while saving the TrafficScheduleEntry: {} {}
update.trafficscheduleentry.data.access.error=A data access error occurred while updating the TrafficScheduleEntry: {} {}
update.trafficscheduleentry.unexpected.error=An unexpected error occurred while updating the TrafficScheduleEntry: {} {}
trafficschedule.not.exist=Traffic schedule with ID {} does not exist
delete.trafficscheduleentry.data.access.error=A data access error occurred while deleting the TrafficScheduleEntry: {} {}
delete.trafficscheduleentry.unexpected.error=An unexpected error occurred while deleting the TrafficScheduleEntry: {} {}
fetch.trafficscheduleentries.data.access.error=A data access error occurred while fetching the list of TrafficScheduleEntries: {} {}
fetch.trafficscheduleentries.unexpected.error=An unexpected error occurred while fetching the list of TrafficScheduleEntries: {} {}
save.smscloopingentry.data.access.error=A data access error occurred while saving the SmscLooping entry: {} {}
save.smscloopingentry.unexpected.error=An unexpected error occurred while saving the SmscLooping entry: {} {}
smscloopingentry.updated.successfully=SmscLooping entry updated with id: {}
update.smscloopingentry.data.access.error=A data access error occurred while updating the SmscLooping entry: {} {}
update.smscloopingentry.unexpected.error=An unexpected error occurred while updating the SmscLooping entry: {} {}
smscloopingentry.deleted.successfully=SmscLooping entry deleted with id: {}
delete.smscloopingentry.data.access.error=A data access error occurred while deleting the SmscLooping entry: {} {}
smscloopingentry.not.found=SmscLooping entry not found: {} {}
delete.smscloopingentry.unexpected.error=An unexpected error occurred while deleting the SmscLooping entry: {} {}
retrieve.smscloopingrule.data.access.error=A data access error occurred while retrieving the SmscLooping rule: {} {}
retrieve.smscloopingrule.unexpected.error=An unexpected error occurred while retrieving the SmscLooping rule: {} {}
list.smscloopingrules.unexpected.error=An unexpected error occurred while listing SmscLooping rules: {} {}
convert.smscentryrequest.successfully=Converted SmscEntryRequest to SmscEntry successfully
convert.smscentryrequest.error=Error occurred while converting SmscEntryRequest to SmscEntry: {}
convert.customrequest.successfully=Converted CustomRequest to CustomEntry successfully
convert.customrequest.error=Error occurred while converting CustomRequest to CustomEntry: {}
convert.grouprequest.successfully=Converted GroupRequest to GroupEntry successfully
convert.grouprequest.error=Error occurred while converting GroupRequest to GroupEntry: {}
convert.groupmemberrequest.successfully=Converted GroupMemberRequest to GroupMemberEntry successfully
convert.limitrequest.successfully=Converted LimitRequest to LimitEntry successfully
convert.groupmemberrequest.error=Error occurred while converting GroupMemberRequest to GroupMemberEntry: {}
convert.smscloopingrequest.successfully=Converted SmscLoopingRequest to SmscLooping successfully
convert.smscloopingrequest.error=Error occurred while converting SmscLoopingRequest to SmscLooping: {}
convert.trafficschedulerequest.successfully=Converted TrafficScheduleRequest to TrafficScheduleEntry successfully
convert.trafficschedulerequest.error=Error occurred while converting TrafficScheduleRequest to TrafficScheduleEntry: {} {}
smscbsfmentry.saved.successfully=SmscBsfmEntry Saved Successfully!
retrieve.trafficscheduleentries.successfully=Successfully retrieved traffic schedule entries for user: {}
listtrafficschedule.error=Error in listTrafficSchedule for user {}: {} {}
listtrafficschedule.unexpectederror=Unexpected error in listTrafficSchedule for user {}: {} {}
retrieve.smscbsfmentries.successfully=Successfully retrieved SMS/C BSFM entries for user: {}
listsmscbsfm.error=Error in listSmscBsfm for user {}: {} {}
listsmscbsfm.unexpectederror=Unexpected error in listSmscBsfm for user {}: {} {}
entry.deleted.successfully=Entry deleted with id: {}
entry.retrieved.successfully=Entry retrieved successfully with id: {}
sms.entry.notfound=SMS entry not found with ID: {}


#ALERT
add.performance.alert.request=Add Performance Alert Request From {} [{}]
operation.success=message: operation success
alert.deleted.successfully=Alert deleted successfully!
all.alerts.notfound=All alerts not found!
all.alerts.fetched.successfully=All alerts fetched successfully!
modify.performance.alert.request=Modify Performance Alert Request From {} [{}]
operation.success=message: operation success
alertentity.updated.successfully=AlertEntity updated successfully!
error.updating.alert.entity=Error updating the alert entity!
setup.alert.request={} Setup Alert Request
setup.alert.target={} Setup Alert Target:{}

#sms service
log.listing.route_entries=Listing RouteEntries For {} hlr: {} optional: {}
hlr.entry.not.found = Hlr Entry Not Found For:
optional.entry.not.found = Optional Entry Not Found For:
routing.entries.not.found = Routing Entries Not Found {} For: {}
route.entries.count = {} RouteEntries: {}
single.schedule.request=Single Schedule Request <{}>
single.sms.request=Single Sms Request <{}>
bulk.sms.message.info=Message Type: {} Parts: {}
scheduled.time.before.current.error=Scheduled Time is before Current Time
error.with.session.id={} {}
error.invalid.destination=Invalid Destination Found => {}
error.insufficient.balance=Insufficient Balance => {}
error.insufficient.admin.balance=Insufficient Admin({}) Balance => {}
message.schedule.success=Message scheduleSuccess.....
error.singleschedule.error=Error Single Schedule Error
error.smsError.error=Sms Error
message.smsSuccess.info=Sms Success
sms.processed=Processed:-> Bulk Session ID: {} Balance: {} Cost: {}
process.failed=Process Failed:-> Bulk Session ID: {}
error.insufficientWallet=Insufficient Wallet Balance Error
error.novalidNumber=No Valid Number Found Error
error.insufficientCredits=Insufficient Credits Error
error.insufficientAdminCredits=Insufficient Admin({}) Credits Error
message.scheduleSuccess=Message Scheduled Successfully
message.processed.credits=Processed :-> Credits: {} Deduct: {}
error.process.failed=Process Failed: {}
error.insufficientCredit=Insufficient Credit: {}
send.single.message=Sending Single Message: {} - Sender ID: {}
summary.report.error=Error Adding To Summary Report: {}
submit.exception.error=Exception on Submit[{}] : {}
submit.failed.insufficient.balance=Submit failed < Insufficient balance:{} >
submit.failed.invalid.message.length=Submit failed < Invalid Message Length:{} >
submit.failed.invalid.destination=Submit failed < Invalid Destination:{} >
submit.failed.invalid.source.address=Submit failed < Invalid Source Address:{} >
submit.failed.account.expired=Submit failed < Account Expired:{} >
submit.failed.command.status=Submit failed < {}:{} >
submit.failed.no.response=Submit failed < No Response: {} >
total.submitted=Total Submitted: {}
error.message= {} {}
error.message={}
error.fillInStackTrace={}
bulk.schedule.request=Bulk Schedule Request <{} >
bulk.upload.request=Bulk Upload Request <{} >
start.processing.uploaded.files=Start Processing Uploaded Files
processing.file=Processing File: {}
invalid.file.uploaded=Invalid File Uploaded: {}
invalid.exclude.number.found=Invalid Exclude Number Found: {}
excluded.numbers=\<------ {} Excluded ------>
invalid.destination.number=Invalid Destination Number -> {}
empty.row.found= <-- Empty Row Found[{}] --> 
total.rows=Total Rows[{}] in File: {}
invalid.column.found=Invalid Column Found at Row {}
invalid.destination.number=Invalid Destination Number -> {}
sheet.processed=Sheet {} Processed
file.parsing.error=Parsing File: {} Error: {}
file.number.counter=NumberCounter: {}
uploaded.files.processed=End Processing Uploaded Files. Numbers Found: {}
list.info.summary=Total: {} Valid: {} Invalid: {} Duplicate: {} DuplicateAllowed: {}
message.type.parts.info=Message Type: {} Parts: {}
client.server.time.info=client_gmt: {} client_time: {} server_time: {}
scheduled.time.before.current.error=Scheduled Time is before Current Time: {}
error.schedule.time=Error: Schedule Time
balance.calculated.cost=Balance: {} Calculated Cost: {}
admin.balance.calculated.cost=Admin[{}] Balance:{} Calculated Cost: {}
insufficient.admin.balance=Insufficient Admin({}) Balance
schedule.task.error=Error: Unable to schedule the task. An error occurred while processing the schedule request.
duplicate.schedule.error=Error: The task is already scheduled. Duplicate schedule request received.
bulk.sms.sent.successfully=Bulk SMS sent successfully. Message: {}
error.sending.bulk.sms=Error sending bulk SMS. Details: {}
processed.balance.cost=Processed :-> Balance: {} Cost: {}
error.insufficient.balance=Error: Insufficient balance to perform the operation. Please add funds to your wallet.
error.general=Error: {}
info.general={}
info.batch.success=message.batchSuccess
info.processed.credits=Processed :-> Credits: {} Deduct: {}
error.insufficient.credits=Error: Insufficient Credits.
error.insufficient.wallet.balance=Error: Insufficient Wallet Balance.
tracking.schedule.request=Tracking Schedule Request <{}>
tracking.upload.request=Tracking Upload Request <{}>
number.length.less=Number {} length is less than {}
list.info.summary=Total: {} Valid: {} Invalid: {} Duplicate: {} DuplicateAllowed: {}
client.time.gmt.info=client_gmt: {} client_time: {} server_time: {}
web.links.received=Received Web Links: {}
final.web.links=Final Web Links: {}
content.one=content[1]: {}
content.two=content[2]: {}
admin.balance.calculatedcost=Admin[{}] Balance:{} Calculated Cost: {}
insufficient.admin.balance=Insufficient Admin({}) Balance
insufficient.balance=Insufficient Balance
unable.schedule.task.error=Error: Unable to schedule the task. An error occurred while processing the schedule request.
duplicate.schedule.error=Error: The task is already scheduled. Duplicate schedule request received.
bulk.sms.success=Bulk SMS sent successfully. Message: {}
error.insufficient.balance=Insufficient balance to perform the operation. Please add funds to your wallet.
error.invalid.number=Invalid destination number: {}
error.insufficient.admin.credits=Insufficient credits for admin {}.
message.scheduleSuccess=Schedule request processed successfully.
error.scheduleError=Unable to schedule the task. An error occurred while processing the schedule request.
error.duplicateSchedule=The task is already scheduled. Duplicate schedule request received.
message.bulkSMSSuccess=Bulk SMS sent successfully. Message: {}
message.bulkSMSProcessed=Processed :-> Credits: {} Deduct: {}
error.insufficientCredit=Error: Insufficient Credits.
error.insufficientWallet=Error: Insufficient Wallet Balance.
error.novalidNumber=Error: No Valid Number Found.
error.fillInStackTrace=Error occurred for system ID: {}
info.reqTypeAlert={} {} isAlert: {} Number: {}
info.invalidAlertNumber=Invalid Alert Number: {}
info.invalidAlertNumbers=Invalid Alert Numbers: {}
info.preparingBatchContentList=Preparing batch content list
info.invalidNumber=Invalid Number: {}
info.endPreparingBatchContentList=End Preparing batch content list
error.addingBulkEntry=Error Adding Bulk Entry: {}
info.batchAddedToWaitingForApprove={} Batch Added To Waiting For Approve.
info.entryAdded=Entry Added: {}
error.summaryReport=Error Adding To Summary Report: {}
info.batchAddedToProcessing=Batch Added To Processing: {}
info.entryNotAdded=Entry Not Added: {}
error.startError=Start Error: {}  -> User : {} | Batch : {}
error.createTableOrPersistEntities=Error creating table or persisting entities: {}
info.customScheduleRequest=Custom[{}] Schedule Request <{}>
info.customUploadRequest=Custom[{}] Upload Request <{}>
info.invalidExcludeNumber=Invalid Exclude Number Found: {}
info.excludeCount=Exclude Count: {}
info.invalidSeparator=Invalid Separator Found [{}]:{}
info.sheetTotalRows=Sheet[{}] Total Rows: {}
info.totalColumns=Total Columns: {}
info.invalidColumn=Invalid Column[{}] -> {}
info.unsupportedFileFormat=<--- Unsupported File Format --->
info.columnsCount={} Columns: {}
info.conversion=Converting {}{}: Unicode
info.params=Params: {}
error.invalidDestination=Invalid Destination[{}] : {}
info.numbersCount={} numbers: {}
info.adminBalance=Admin[{}] Balance:{} Calculated Cost: {}
error.insufficientBalance=Insufficient Balance for Bulk Session {}: {}
error.insufficientAdminBalance=Insufficient Admin({}) Balance for Bulk Session {}: {}
error.scheduleTask=Error: Unable to schedule the task. An error occurred during the scheduling process.
error.duplicateSchedule=Error: The task is already scheduled. Duplicate schedule request received.
info.batchProcessingCompleted=Batch processing completed successfully. Message: {}
error.batchSubmissionProcessing=Error: Unable to process batch submission. An error occurred during the submission process. Details: {}
error.insufficientBalance=Error: Insufficient balance to perform the operation. Please add funds to your wallet.
info.taskScheduled=Task scheduled successfully. Details: {}
error.scheduleTask=Error: Unable to schedule the task. An error occurred during the scheduling process.
error.duplicateSchedule=Error: The task is already scheduled. Duplicate schedule request received.
info.batchProcessingCompleted=Batch processing completed successfully. Additional details:
error.batchSubmissionProcessing=Error: Unable to process batch submission. An error occurred during the submission process.
info.processedCreditsDeducted={} Processed :-> Credits: {} Deduct: {}
error.insufficientBalance=Error: Insufficient balance to perform the operation. Please add funds to your wallet.
error.insufficientCredits=Error: Insufficient credits to perform the operation. Please add more credits.
error.noValidNumbers=Error: No valid numbers found in the provided file. Please check the file and try again.
error.invalidFileFormat=Error: Invalid file format. Please provide a valid file.
info.contactScheduleRequest=Contact Schedule Request
info.contactUploadRequest=Contact Upload Request
info.listSummary=Total: {} Valid: {} Invalid: {} Duplicate: {}
error.sessionIdWithErrorMessage=An error occurred: {} {}
info.taskScheduledSuccessfully=Task scheduled successfully. Additional details: {}
error.genericMessage=Error: {}
info.genericMessage={}
info.processedBalanceCost={} Processed :-> Balance: {} Cost: {}
info.taskScheduledSuccessfully=Task scheduled successfully.
info.batchProcessingCompletedSuccessfully=Batch processing completed successfully. Additional details: {}
error.batchSubmissionProcessing=Error: Unable to process batch submission. An error occurred during the submission process.
info.processedCreditsDeducted={} Processed :-> Credits: {} Deduct: {}
error.insufficientCredits={} <-- Insufficient Credits --> {}
error.noValidNumbers=Error: No valid numbers found in the provided data. Please check the data and try again.
error.insufficientBalance=Error: Insufficient balance to perform the operation. Please add funds to your wallet.
info.contactTrackingScheduleRequest={} Contact Tracking Schedule Request
info.contactTrackingUploadRequest={} Contact Tracking Upload Request
info.listInfoSummary=Total: {} Valid: {} Invalid: {} Duplicate: {}
info.adminBalanceAndCost=Admin[{}] Balance: {} Calculated Cost: {}
error.insufficientAdminBalance= <-- Insufficient Admin({}) Balance -->
info.scheduleUpdated=Schedule has been successfully updated.
info.batchProcessingCompleted=Batch processing completed successfully.
error.insufficientAdminCredits=Insufficient Admin({}) Credits
info.successMessage={}
info.batchProcessedSuccessfully={}
error.noValidNumbersFoundInFile=Error: No valid numbers found in the provided file. Please check the file and try again.
info.groupDataScheduleRequest=GroupData Schedule Request. Tracking: {}
info.groupDataBulkUploadRequest=GroupData BulkUpload Request. Tracking: {}
error.invalidNumber=Invalid Number: {}
error.duplicateScheduleRequest=Error: The task is already scheduled. Duplicate schedule request received.
error.insufficientBalance=Insufficient balance to perform the operation. Please add funds to your wallet.
info.mmsUploadAction={} <--- Mms Upload Action ----> 
error.invalidBatchFinishAlertNumber={} Invalid Batch Finish Alert Number: {}
error.invalidAlertNumber={} Invalid Alert Number: {}
info.mmsScheduleRequest={} MMS Schedule Request <{}>
info.mmsUploadRequest={} MMS Upload Request <{}>
info.processingFile=Processing File: {}
warn.invalidFileUploaded=Invalid File Uploaded: {}
error.invalidExcludeNumber=Invalid Exclude Number Found: {}
info.totalRows=Total Rows[{}]: {}
info.invalidColumn=Invalid Column Found at Row {}: {}
info.sheetProcessed=Sheet {} Processed: {}
error.fileParsing=Parsing File: {} Exception: {}
info.numberCounter=NumberCounter: {}
info.listInfoSummary=Total: {} Valid: {} Invalid: {} Duplicate: {} DuplicateAllowed: {}
info.clientTime=client_gmt: {} client_time: {} server_time: {}
error.schedule.time=An error occurred while processing a scheduled task at {}
admin.balance.calculated=Admin[{}] Balance:{} Calculated Cost: {}
insufficient.admin.balance=Insufficient Admin({}) Balance
message.scheduleSuccess=The task was successfully scheduled
error.scheduleError=Error scheduling the task
error.duplicateSchedule=The task is already scheduled
message.batchSuccess=Batch operation completed successfully
error.batchError=Error occurred during batch operation
error.insufficientWallet=Insufficient wallet balance for the operation
error.noValidNumber=No valid numbers found in the file
error.insufficientAdminCredits=Insufficient Admin({}) Credits
message.scheduleSuccess=Task scheduled successfully
error.duplicateSchedule=Error: Task is already scheduled
error.batchError=Error during batch submission
info.processedCreditsDeducted=Processed :-> Credits: {} Deduct: {}
error.insufficientCredit=Error: Insufficient credit for the operation
error.insufficientWallet=Error: Insufficient funds in the wallet for the operation
info.autoScheduleRequest=Auto Schedule Request: {}
info.totalRows=Total Rows: {}
error.invalidFormat=Invalid Format: Column Count must be greater than or equal to 5
info.invalidColumn=Invalid Column[{}] -> {}
info.invalidMobileEntry=Invalid Mobile[{}] Entry: {}
info.scheduledTimeBeforeCurrentTime=Scheduled Time[{}] Before Current Time. Skipped
error.schedulingError={} <-- Scheduling Error --> 
error.schedulingFileCreationError={} <-- Scheduling File Creation Error --> 
error.invalidMobileEntry={} Invalid Mobile[{}] Entry: {}
error.invalidTimeEntry={} Invalid Time[{}] Entry: {}
error.invalidMonthEntry={} Invalid Month[{}] Entry: {}
error.invalidYearEntry={} Invalid Year[{}] Entry: {}
error.invalidGmtEntry={} Invalid Gmt[{}] Entry: {}
info.totalScheduleCreated={} Total Schedule Created: {}
info.noValidEntryFound=No Valid Entry Found
error.noValidEntryFound=No Valid Entry Found
info.bulkSmsRequest= {} {} isAlert: {} Number: {}
info.groupDataCriteria=listing GroupData Using Criteria: {}
info.criteriaForNumbers=Adding Criteria For Numbers: {}
error.exceptionOccurred=An exception occurred: {}
info.trackingDetails=Posting Tracking Details: {}
info.campaignResponse=Response For CampaignId: {}
info.readingScheduleFile=Reading schedule File:-> {}
info.fileMode=file [{}:{}] {}
info.sufficientCredits=file [{}] Sufficient Credits: {}
error.insufficientCredits=file [{}] Insufficient Credits: {}
info.sufficientBalance=file [{}] Sufficient Balance: {} Required: {}
error.insufficientBalance=file [{}] Insufficient Balance: {} Required: {}
error.fileProcessingError=file Processing Error: {}
info.scheduleExpired=[{}] Schedule Expired: {}
info.scheduleListed=[{}] Schedule Listed: {}
error.scheduleParseError=[{}]Schedule ParseError: {} {}
error.emptyMessage=Error occurred: {}
info.editRequest=Edit Request For BatchId: {}
info.deactivateBatch=Deactivating BatchId: {}
info.batchEdited=BatchId {} edited successfully.
error.batchNotFound=BatchId {} not found in bulkEntryRepository.
error.batchNotFound=BatchId {} not found in BatchQueue.
error.editBatch=Error editing BatchId: {}
info.pauseBatch=Pause Request For BatchId: {}
info.batchPaused=Batch Paused: {}
info.batchPausedSuccessfully=Paused batch successfully.
warn.batchNotFound=Batch Not Found: {}
info.resumeRequest=Resume Request target: {}
error.resumeBatchNotFound=Error resuming batch: Batch Not Found
error.resumeBatch=Error resuming batch: {} {}
error.pauseBatchNotFound=Error pausing batch: Batch Not Found
error.pauseBatchError=Error pausing batch: {}
info.resumeBatch=Resume Request For BatchId: {}
info.batchResumed=Batch Resumed: {}
info.batchResumedSuccess=Batch resumed successfully.
info.fileIdModified=Modified FileId: {} Expiry: {} Delay: {}
error.fileId=FileId: {}
error.failedToRetrieveBatchList=Failed to retrieve batch list for user: {} [{}]
error.invalidRequest=Invalid request from user: {} [{}]
info.scheduleListRequest=Schedule list requested by user: {} [{}]
error.fileAccess=Error accessing file: {}
error.failedToRetrieveBatchList=Failed to retrieve batch list for user: {} [{}]
info.scheduleList=Schedule list retrieved successfully: {}
error.invalidRequest=Invalid request received from user: {}
info.scheduleAbortRequest=Schedule abort request received for schedule ID: {}
error.unauthorizedAbortSchedule=Unauthorized attempt to abort schedule by {} [{}]. Schedule owner: {}
info.scheduleAbort=Schedule aborted successfully: {} [{}]. Schedule ID: {} Target: {}
info.scheduleEditRequest=Schedule edit request for: {} [{}]. Schedule ID: {}
info.scheduleFileFound=Schedule file found for client {} [{}]: {}
error.fileAccessError=Error accessing file: {}
error.scheduleFileNotFound=Schedule file not found: {}
error.fileNotFound=File not found: {}
info.mismatchedSchedule=Mismatched Schedule: {} {}
error.fileNotFound=File not found: {}
error.fileOperation=Error occurred while performing file operation: {}
error.deleteScheduleFileException=Exception in Delete Schedule File: {}
info.batchSubmissionSuccess=Batch submission successfully completed: {}
error.batchSubmissionError=Error occurred during batch submission: {}
error.insufficientBalance=Error: Insufficient balance to process the transaction. Error code: error.insufficientWallet
error.invalidNumberFile=Error: The provided number file is not valid. Error code: error.novalidNumber
error.insufficientWallet=Error: Insufficient balance in the wallet to complete the transaction. Error code: error.insufficientWallet
error.novalidNumber=Error: The provided number file is not valid. Please check the format and content. Error code: error.novalidNumber
error.exceptionOccurred=An exception occurred: {}
error.scheduleError=Error scheduling the task. An error occurred during the scheduling process.
error.duplicateSchedule=The task is already scheduled. Duplicate schedule request received.
error.insufficientWallet=Insufficient funds in the wallet. Transaction failed.
error.invalidNumber=Invalid number provided. Please enter a valid numerical value.
info.scheduleSuccess=Scheduled task successfully. The schedule was processed without errors.
error.scheduleError=Error during scheduling: Unable to process the schedule due to an unexpected error.
error.duplicateSchedule=Error: Unable to schedule task. A duplicate schedule was detected. Please choose a different schedule.
error.insufficientCredit=Error: Insufficient credit. The transaction or operation could not be completed due to insufficient funds or credit.
error.invalidNumber=Error: Invalid number provided. Please enter a valid numerical value for the operation to proceed.
error.insufficientWallet=Error: Insufficient funds in the wallet. The requested operation cannot be completed due to insufficient balance.
error.userError=Error occurred for user: {}
error.invalidNumber=Error: Invalid number provided. Please ensure that you enter a valid numerical value for the intended operation.
info.configuredSenders=Configured Senders: {}
info.configuredSendersRestrictedTo=Configured Senders Restricted To: {}
error.webmasterEntryNotFound={} Webmaster Entry Not Found
info.noSendersConfigured={} No Senders Configured
info.sendAlert={} {} sendAlert:-> {} Number:{}
error.submitException={} Exception on Submit[{}] : {}
error.insufficientBalance={} Submit failed < Insufficient balance:{} >
error.invalidMessageLength={} Submit failed < Invalid Message Length:{} >
error.invalidDestination={} Submit failed < Invalid Destination:{} >
error.invalidSourceAddress={} Submit failed < Invalid SourceAddress:{} >
error.accountExpired={} Submit failed < Account Expired:{} >
error.submitFailed={} Submit failed < {}:{} >
error.submitFailedNoResponse={} Submit failed < No Response: {} >
error.unknownError=An unknown error occurred.
































































































































