# Messages for logger
#login service Exception Message
auth.successful=Authentication successful for user :{}
auth.failed.userNotFound=Authentication failed. User not found:{}
auth.failed.password=Authentication failed. Invalid password for the user:{}
log.attemptAuth=Attempting to authenticate for user:{}
log.internalServerError=Internal server error during authentication 
internal.server.error=Internal server error ,Authentication failed  :{} 
user.account.expired = <- User Account Expired -> {}
user.password.expired = <- User Password Expired -> {}
user.account.blocked = {} Blocked By Flag <404>
user.flag.value = {} Flag ====> {}
user.flag.read.error = <-- {} Flag Read Error -->
user.check.ipaddress = {} <-- Checking For AccessIP -->
user.local.ip.match = {} Local AccessIp Matched: {}
user.matching.super.access.ip.info = {} Matching[{}] From Super Access IP list
user.range.matched.info = {} Range[{}] Matched: {}
user.configured.ip.matched.info = {} Configured[{}] Ip Matched: {}
user.matching.global.access.ip.info = {} Matching[{}] From Global Access IP list
user.access.ip.not.matched.info = {} Access IP Not Matched: {}
user.matching.allowed.country.info = {} Matching[{}] From Allowed Country list
user.country.found.info = {} Country [{}] found in database: {}
user.country.not.found.info = {} Country [{}] not found in database.
user.access.ip.not.allowed.info = {} Access IP Not Allowed: {}
user.valid.access.country.info = {} Valid Access Country: {}
user.access.countries.not.configured.info = {} Access Countries Not Configured.
user.valid.access.ip.info = {} Valid Access IP: {}
user.access.ip.not.configured.info = {} Access IP Address Not Configured.
user.multi.user.access.enabled.info = {} Multi User Access Enabled.
user.no.multi.access.name.found.info = {} No Multi Access Name Found
user.otp.number.info = {} OTP Number: {}
user.invalid.otp.number.error = {} Invalid OTP Number Configured: {}
user.valid.otp.numbers.info = {} Valid OTP Numbers: {}
user.no.otp.entry.found.info = No OTP entry found for the user!
user.otp.expired.on.info = {} OTP ExpiredOn: {}
user.otp.format.error = OTP_FORMAT (unable to read otp.txt file): {}
user.domain.email.found.info = {} Domain-Email Found: {}
user.master.domain.email.found.info = {} Master Domain-Email Found: {}
user.domain.email.not.found.info = {} Domain-Email Not Found
user.sending.otp.email.info = {} Sending OTP Email From[{}] on: {}
user.otp.already.generated.info = Otp already generated!
user.otp.number.not.configured.error = {} OTP Number Not Configured.
user.web.access.denied.info = Web Access Denied User -> {} Password -> {}
user.invalid.credentials.error = Invalid Credentials! Unable to validate User.


#MobileDb Service Logger message
mobileDb.enter.addMobileDbData = Entering addMobileData method
mobileDb.addDataEntry.getAge=  Add Mobile Data Age of the user is :{}
mobileDb.getUsername = Provided user name is :{}
# Message related to file format
file.format=File format: {}
# Messages related to save operation
mobileDb.saveSuccess=Successfully inserted mobile data into the database
mobileDb.saveFailure=Failed to insert mobile data into the database
mobileDb.addMobileData.exiting=Exiting addMobileData method
mobileDb.addMobileData.nullValues=One or More Values are Null or Incorrect in addMobileData Function
# Message related to showing mobile data
mobileDb.showData.mobileNumber=Mobile number received in showMobileData method:{}
mobileDb.showData.mobileNumberNotFound=Mobile number not found in the database: {}
mobileDb.showData.success=Successfully retrieved mobile data from the database
mobileDb.showData.failure=Failed to retrieve mobile data from the database
# Error message for exceptions
mobileDb.showData.exception=Error in showMobileData method: {}
# Messages related to updating mobile data list
mobileDb.updateDataList.nullArrays=One or more arrays are null in UpdateMobiledatalist  Method
mobileDb.updateDataList.success=Successfully updated mobile data list
mobileDb.updateDataList.failure=Failed to update mobile data list
mobileDb.updateDataList.noSuchElementError=Entry with given id is not present
mobileDb.updateDataList.exception=Error in updateMobileDataList method: {}
# Messages related to deleting mobile data list
mobileDb.deleteDataList.checkedC=Checked counts: {}
mobileDb.deleteDataList.success=Successfully deleted mobile data list
mobileDb.deleteDataList.failure=Failed to delete mobile data list
mobileDb.deleteDataList.noSuchElementError=Entry with given id not present
mobileDb.deleteDataList.arrayIndexOutOfBoundsError=Count of entry mobile ID and Check_Count does not match
mobileDb.deleteDataList.exception=Error in deleteMobileDataList method: {}
# Messages related to choosing mobile numbers
mobileDb.chooseRequired.smsCount=SMS Count - {}
mobileDb.chooseRequired.smsCountOutOfBounds=SMS count is out of bounds
mobileDb.chooseRequired.parseError=Error parsing integer
mobileDb.chooseRequired.sendNowSmsCountError=Send Now SMS Count is more than the number list count
mobileDb.chooseRequired.exception=Error in chooseRequired method: {}
# Messages related to editing data
mobileDb.editData.info=EditDataAction Called
mobileDb.editData.exception=Error in editData method: {}
# Messages related to getting sub-areas
mobileDb.getSubArea.info=Area - {}
mobileDb.getSubArea.subAreas=Sub Areas :: {}
mobileDb.getSubArea.subAreaDoesNotExist=Subarea Does not exist for the given area
mobileDb.getSubArea.exception=Error in getSubArea method: {}
mobileDb.mobileUserList.numberFormatException=Error parsing number: {}
mobileDb.mobileUserList.generalException=Exception in uploading number: {}
mobileDb.mobileUserList.SaveContactList=Error In Saving Multiple Conacts From List: {}

# Log messages for mobileUserList method
mobileDb.enter.mobileUserList=Entering mobileUserList method.
mobileDb.intermediate.ageRange=Age range: {}
mobileDb.intermediate.areaArrayLength=Area array length: {}
mobileDb.intermediate.subareaArrayLength=Subarea array length: {}
mobileDb.intermediate.professionArrayLength=Profession array length: {}
mobileDb.intermediate.classTypeArrayLength=ClassType array length: {}
mobileDb.intermediate.executingQuery=Executing query: {}
mobileDb.error.mobileUserList=Error in mobileUserList method: {} - {}
mobileDb.exit.mobileUserList = Exit mobileUserList Function

# Add more keys as needed for additional log messages
mobileDb.enter.mobileUserListInfo=  Entered into Mobile user List Info Function
mobileDb.success.mobileUserListInfo = Successfully fetched Data
mobileDb.failure.mobileUserListInfo= Failed to fetch Data
mobileDb.userId.queryForMobileRecord = User ID
mobileDb.webEntryOptional.queryForMobileRecord= Web Entry Reached 
mobileDb.success.queryForMobileRecord= Successfully fetched Data
mobileDb.failed.queryForMobileRecord=Failed to fetch Data
mobileDb.NumberFormatException.SendAreaWiseSms= NumberFormatException
mobileDb.finalList.SendAreaWiseSms=finalList

#bsfm logger
bsfm.add.msg={} [{}] Add Spam Profile: {}
bsfm.noUser={} [{}] No User Selected For The Operation.
bsfm.msg.error= Error Message: {}
bsfm.add.success=Bsfm Profile added successfully: {}
bsfm.failed.duplicate=Duplicate Entry Found! Failed to add Bsfm Profile: {}
bsfm.add.failed=Failed to add Bsfm Profile: {}
bsfm.req.check=Checked Request By username: {} userid: {}
bsfm.req.edit={} Edit Profile Request: {}
bsfm.invalid.network={} [{}] Invalid Network {}
bsfm.is.scheduled={} isSchedule: {}
bsfm.day.time={} day_time_token: {}
bsfm.invalid.day={} Invalid Day: {}
bsfm.invalid.schToken={} Invalid Schedule token: {}
bsfm.show.success=Bsfm profiles listed successfully for user: {}
bsfm.show.failed = No Bsfm profiles available for user: {}
bsfm.update.profile={} [{}] Update Spam Profile: {}
bsfm.invalid.daytime= {} Invalid DayTime Configured: {}
bsfm.update.success=Spam Profile updated successfully: {}
bsfm.update.failed=Failed to update Spam Profile: {}
bsfm.duplicate.profilename=Duplicate Bsfm Profile with profilename: {}
bsfm.noProfile.exist=No Bsfm Profile exists with Id: {}
bsfm.delete.error=Error deleting BsfmActiveProfile {}
bsfm.req.delete=Delete request by username: {}
bsfm.delete.success=Spam Profile deleted successfully!
bsfm.delete.failed = Failed to delete Spam Profile!
bsfm.req.updateFlag=Update Bsfm profile flag requested by: {}
bsfm.updateFlag.success=Flag value change: Success
bsfm.updateFlag.failed=Flag value change: Failure

#sales logger
sales.req.add = Sales User [{}-{}] Add Requested By {} [{}]
sales.warn.user=Usermaster Entry Exists With same Username {}
sales.add.success=Sales User Created With Id: {}. Status: {}
sales.add.failure=Unable to create Sales User: {}
sales.msg.error = Unexpected Error: {}

sales.update.req = Executive [{}] Update Requested By {} [{}]
sales.updateRequest = Update Requested: {}
sales.entry.notfound = Sales Entry not found with id: {}
sales.update.success = Sales Entry Updated successfully! Status: {}
sales.update.failure = Unable to update SalesEntry: {}
sales.req.delete= Delete Requested for Sale ID: {}
sales.operation.success = Operation successful: Sale ID {}
sales.req.list = Executive List Requested By {} [{}]
sales.list.users = Executives Under [{}] : {}
sales.list.nousers=No Executive Found Under {} | {}
sales.view.req = Executive[{}] Details Requested By {} [{}]
sales.manager.noentry = No Sales Entry Found For The Role Manager!
sales.setup.req = Sales User Setup Requested By {} [{}]

#dlt service loggers
dlt.saveDltEntry.enter=Entered in saveDltEntry
dlt.saveDltEntry.userid ={}[{}] Add DltEntry Request:{}
dlt.saveDltEntry.dltEntry=DltEntry Added:{}
dlt.saveDltEntry.success=Dlt Entry Added Successfully
dlt.saveDltEntry.error=Error Occured While Processing
dlt.saveDltEntry.dlt.saveDltEntry.DataIntegrity.error=DataIntegrity Violation Exception error Occurred
dlt.saveDltEntry.Exception.error = An error occurred while saving DltEntry to the repository {}
dlt.addDltTemplate.enter =Entered in addDltTemplate
dlt.addDltTemplate.entry ={}[{}]
dlt.addDltTemplate.systemid ={}[{}] Add Dlt Template Request:{}
dlt.addDltTemplate.firstSheet ={} Sheet[0] Total Rows:{}
dlt.addDltTemplate.Invalid =Invalid Format For Xls File
dlt.addDltTemplate.getRowNum ={}[PE_ID]Invalid Char found[{}]{}
dlt.addDltTemplate.PE_ID =Invalid PE_ID For Entry[{}]{}
dlt.addDltTemplate.Template_ID]Invalid ={}[Template_ID]Invalid Char found[{}]{}
dlt.addDltTemplate.Template_ID =Invalid Template_ID For Entry[{}]{}
dlt.addDltTemplate.invalid.template =Invalid Template For Entry[{}]{}
dlt.addDltTemplate.getRow.template ={}: peId={},templateId={},template={}
dlt.addDltTemplate.error.dltentry =An error occurred while processing DltEntry.
dlt.addDltTemplate.Request.template ={}[{}]Add Dlt Template Request:{}
dlt.addDltTemplate.empty.template =<--- Dlt Templates empty -->
dlt.addDltTemplate.entries.template = Dlt Template entries:{}
dlt.addDltTemplate.Inserted.template =Dlt Template Inserted:{}
dlt.addDltTemplate.Successfully.template =Data Added to List Successfully
dlt.addDltTemplate.userRole.template ={}[] Add Dlt Template Target:{}
dlt.listDltEntry.enter =Entered in listDltEntry
dlt.listDltEntry.DltEntry ={}[{}]list DltEntry Request
dlt.listDltEntry.List = DltEntry List:{}
dlt.listDltEntry.DltEntry.target ={}[{}] list DltEntry Target:{}
dlt.listDltEntry.error =No data is Avaliable in the template list
dlt.listDltTemplate.enter=Entered in listDltTemplate
dlt.listDltTemplate.Template.request={}[{}]list Dlt Template Request
dlt.listDltTemplate.Template.list=Dlt Template List:{}
dlt.listDltTemplate.Template.Target={}[{}] list Dlt Template Target: {}
dlt.listDltTemplate.noRecord=No Record Avaliable
dlt.updateDltEntry.enter=Entered in updateDltEntry
dlt.updateDltEntry.Update.userDetail={}[{}] Update DltEntry Request:{}
dlt.updateDltEntry.success=Entry Updated Successfully
dlt.updateDltEntry.Target={}[{}] Update DltEntry Target:{}
dlt.updateDltTemplate.enter=Entered in updateDltTemplate
dlt.updateDltTemplate.Template.user={}[{}] Update Dlt Template Request: {}
dlt.updateDltTemplate.success=Template Updated Successfully 
dlt.updateDltTemplate.Target={}[{}] Update Dlt Template Target:{}
dlt.deleteDltEntry.success=Entry Deleted Successfully
dlt.deleteDltTemplate.success = Template Deleted Successfully
dlt.deleteDltTemplate.target = {}[{}] Remove Dlt Template Target:{}
dlt.getDltEntry.DltEntry = {}[{}] View DltEntry Request:{}
dlt.getDltEntry.target = {}[{}]  View DltEntry Target::{}
dlt.getDltTemplate.Request = {}[{}] View Dlt Template Request::{}
dlt.getDltTemplate.Target = {}[{}]  View Dlt Template Target::{}

#template
add.template.req=Add Template Request By userId: {} Title: {} Message: {}
process.error=Process Error: {} [{}]
add.template.success=Add Template Request Successful by userId: {} Title: {} Message: {}
processing.error=Processing Error
get.template.req=Get Template Request By userId: {} Template Id: {}
get.template.success=Get Template Request Successful By userId: {} Template Id: {}
error.processing.template=Error Processing Template by id: {}
get.all.templates.req=Get All Templates Requested by userId: {}
error.processing.templates=Error processing templates: {}
get.all.templates.success=Get all templates request successful for userId: {}
error.processing.get.all.templates=Error Processing Request for Get All Templates.
update.template.req=Update template request by userId: {} title: {} message: {}
no.template.to.update=No template to update for userId: {}
update.template.success=Update Template Request Successful: {} Title: {} Message: {}
delete.template.info=userId: {} delete templateId: {}
template.deleted.success=Template deleted successful with id: {}
delete.template.error=Delete templateId: {} <-- No template to delete -->
recent.use.template.success=RecentUseTemplate operation succeeded for user: {}
unexpected.error=An unexpected error occurred: {} {} 

#subscription logger
subscription.add.req = Add Subcription page Request By {} Name: {} Sender: {}
subscription.header.upload = {} Header File Uploaded: {}
subscription.header.created = {} Header File Created: {}
subscription.footer.upload = {} Footer File Uploaded: {}
subscription.footer.created = {} Footer File Created: {}
subscription.invalid.cc = {} Invalid Country Code: {}
subscription.saved.success = Subscription Entry Saved Successfully!
subscription.saved.failure = Error saving subscription entry
subscription.contact.failure = Process Error: Contact Group not created!
subscription.dir.created =Subscription Directory Created!
subscription.file.saved = File saved successfully at: {}
subscription.file.deleted = File deleted successfully: {}
subscription.file.notexist = File does not exist: {}
subscription.view.req = View Subcription Page[{}] Request By {}
subscription.msg.noentry = {} --No Subscription Entry found."
subscription.msg.found = {} Subscribe Entry Found: {}
subscription.msg.error = Error Message: {}
subscription.req.list=List Subcription page Request By {}
subscription.entries= {} Subscribe Entries: {}
subscription.req.update = Update Subcription Page[{}] Request By {}
subscription.update.success = Subscribe Entry Updated Successfully!
subscription.update.failed = Failed Updating SubscribeEntry!
subscription.req.delete = Delete Subcription Page[{}] Request By {}
subscription.delete.success = Subscribe Entry Deleted Successfully!

#network logger
network.not.single = Check MCC not selected to single
network.saved.success = NetworkEntry Saved in DB Successful!
network.total.record = Total Inserted Records: {}
network.saved.failure = Failed to enter NetworkEntries in Database. Internal Server Error!
network.remaining = Remaining Records: {}
network.msg.error = Process Error: {}
network.msg.update = Message: Network Updated Successfully!
network.record.updated = Total Updated Records: {}
network.record.unavailable = Record Unavailable!
network.entry.notfound = Network Entry not found with id: {}
network.deleted.record = Deleted Records: {}
network.record.notfound = Total records found: {}
network.map.norecord = No record found in network map!
network.update.failure = Update Failure With Remaining Records: {}

#addressbook logger
addbook.contact.addreq = {} [{}] Adding Contact To Group: {}
addbook.invalid.entryformat = Invalid Format For Entry[{}]: {}
addbook.email.truncate.info = {} Email need to truncate: {}
addbook.error.message = Error Message: {}
addbooksheet.total.rows.info = Sheet[0] Total Rows: {}
addbook.invalid.xls.format.warn = Invalid Format For Xls File!
addbook.invalid.number.entry.warn = Invalid Number For Entry[{}]: {}
addbook.truncate.email.info = {} Email need to truncate: {}
addbook.invalid.number.error = Invalid Number Found: {}
addbook.contactentry.saved.info = ContactEntry Saved Successfully. Message: {}
addbook.no.template.exist.info = NO Template Exist!
addbook.configured.senders.info = {} Configured Senders: {}
addbook.no.senders.configured.error = No Senders Configured
addbook.webmaster.entry.notfound.error = {} Webmaster Entry Not Found!
addbook.no.record.found.error = No Record Found For Selected Criteria
addbook.list.contact.bulk.info = List Contact For Bulk Request by {}
addbook.proceed.contact.bulk.info = Proceed Contact For Bulk Request by {}
addbook.modify.contact.request.info = {}[{}] Modify Contact Request For GroupId: {}
addbook.update.list.empty.error = Update List is Empty. Error while updating data.
addbook.modify.contact.status.info = {} Modify Contact Status: {}
addbook.contact.deleted.info = Deleted contacts by {}: {}
addbook.contact.failed.deletion.warn = Failed to delete contacts by {} Id's: {}
addbook.start.creating.workbook.info = Start Creating WorkBook.
addbook.contact.workbook.created.info = Contact Workbook Created
addbook.export.contact.request.info = {}[{}] Export Contact Request For GroupId: {}
addbook.creating.contact.xlsx.info = {} Creating Contact XLSx
addbook.export.contact.target.info = {} Export Contact Target: {}
addbook.contact.xlsx.download.error = Contact XLSx Download Error: {}
addbook.listing.contactentry.info = Listing ContactEntry for Group : {} page request: {}
addbook.adding.groupdata.info = {}[{}] Adding GroupData To Group: {}
addbook.row.cell.counter.info = Row [{}] Cell Counter: {}
addbook.groupdata.entry.list.empty.error = Group Data Entry list is empty! No data Found To Save!, Status: {}
addbook.groupdata.entry.saved.info = GroupDataEntry Saved Successfully. Status: {}
addbook.groupdata.list.bulk.info = List Group Data[{}] For Bulk Request by {}
addbook.groupdata.send.request.info = Send Group Data[{}] Request by {}
addbook.groupdata.update.request.info = Group Data Update Request by {}
addbook.groupdata.modify.entry.info = {} Modify GroupDataEntry: Update Status: {}
addbook.groupdata.export.request.info = Group Data Export Request by {}
addbook.groupdata.creating.xlsx.info = {} Creating GroupData XLSx
addbook.groupdata.search.request.info = {}[{}] Search GroupData Request For Group: {}
addbook.groupdata.listing.info = Listing GroupData for Group : {} page request: {}
addbook.group.add.contact.request.info = {}[{}] Add Contact Group Request
addbook.group.invalid.name.warn = [{}] Invalid Group Name: {}
addbook.group.no.valid.entry.error = SystemID: [{}] No Valid Entry Found!
addbook.group.add.contact.status.info = {}: Add Contact Group Status: {}
addbook.group.modify.contact.request.info = {}[{}] Modify Contact Group Request
addbook.group.modify.contact.status.info = {} Modify Contact Group. Status: {}
addbook.groupdata.no.entry.found.info = No GroupDataEntry Found For the Group!
addbook.contact.no.entry.found.info = No ContactEntry Found For The Group!
addbook.group.remove.contact.request.info = {}[{}] Remove Contact Group Request
addbook.group.remove.contact.status.info = {} Remove Contact Group. Status: {}
addbook.group.invalid.request.error = {}[{}] <- Invalid Request ->
addbook.group.setup.contacts.target.info = Setup Contacts Group Target: {}

#hlr-smsc logs
hlr.smsc.saved.successfully.info = HlrSmscEntry saved successfully with ID: {}
hlr.smsc.save.error = Error occurred while saving HlrSmscEntry: {}
hlr.smsc.convert.error = Error occurred while converting HlrSmscEntryRequest to HlrSmscEntry: {}
hlr.smsc.convert.success = Converted HlrSmscEntryRequest to HlrSmscEntry successfully
hlr.smsc.not.found.warn = HlrSmscEntry with ID {} and systemId {} not found
hlr.smsc.updated.successfully.info = HlrSmscEntry updated successfully with ID: {}
hlr.smsc.update.data.access.error = DataAccessError occurred while updating HlrSmscEntry with ID {}: {}
hlr.smsc.update.error = Error occurred while updating HlrSmscEntry with ID {}: {}
hlr.smsc.deleted.successfully.info = HlrSmscEntry with ID {} deleted successfully


#Report Message Logger
auth.failed.userNotFound = SMS Latency report not found for username: {}
invalid.argument = Invalid argument: {}
unexpected.error = Unexpected error occurred: {}
batch.aborted.report.check = Checking for Batch Aborted Report...
batch.aborted.report.size = Batch Aborted report: {}

report.size.view.message=ReportSize[View]: Report for user {}: {}
report.finished.message=Report Finished for user with System ID: {}
under.users.message=User: {} Under Users: {}
preparing.report.data.message=Preparing Report Data for user with System ID: {}
fetching.campaign.report.error=An error occurred while fetching the campaign report.
processing.entries.message=Start Processing Entries for {}: {}
end.processing.entries.message=End Processing Entries for {}
prepared.list.message=Prepared List for user with System ID {}: {}
checking.systemId.message=Checking for systemId: {} From: {} To: {}
campaign.entries.message=Campaign entries: {}
campaign.report.message=Campaign[{}] Report: {}

sms.latency.report.notFound=SMS Latency report not found for username: {}
report.size.doc.message=ReportSize[doc] for user with System ID {}: {}

preparing.outputstream.message=Preparing Outputstream for user with System ID {}
xls.report.finished.message=XLS Report Finished for user with System ID {}
error.message=Error occurred for user with System ID {}: {}

preparing.charts.message=Preparing Charts for user with System ID {}

finished.charts.message= Charts Complete for user with System ID {}
creating.virtualizer.message=Creating Virtualizer for user with System ID {}
display.cost.message=Displaying Cost for user with System ID {}: {}
filling.report.data.message=Filling Report Data for user with System ID {}
filling.completed.message= Report Data Filling Completed for user with System ID {}
report.size.pdf.message=ReportSize[pdf] for user with System ID {}: {}
pdf.report.finished.message=PDF Report Finished for user with System ID {}
xls.report.size.message=ReportSize[xls] for user with System ID {}: {}
creating.zip.folder.message=Creating Zip Folder for user with System ID {}
starting.zip.download.message=Zip Downloading start for user with System ID {}
zip.report.finished.message=Zip Report Finished for user with System ID {}
creating.xls.message=Creating XLS for user with System ID {}
reading.xls.message=Reading XLS for user with System ID {}
time.gmt.message=Time conversion: To GMT: {}, From GMT: {}
report.sql.message=Report SQL for user with System ID {}: {}
end.criteria.report.message=End Based On Criteria. Final Report Size for user with System ID {}: {}
error.message=Error occurred with message ID {}: {}
sql.message=SQL Query for report user {}: {}
sql.error.message=Error occurred for report user {}: {}
report.list.size.message=Report list size for report user {}: {}
starting.xls.download.message=Starting XLS Download for user with System ID {}
dlr.xlsreport.error.message=DLR XLSReport Error for user with System ID {}
no.records.found.message=No Records Found for user with System ID {}

creating.doc.message=Creating DOC for user with System ID {}
user.days.message=User with System ID {} requested data for {} days
invalid.seller.id.message=Invalid seller ID for user with System ID {}: {}
user.found.under.seller.message=User with System ID {} found under Seller ID {}: {}
dashboard.report.last.days.message=Getting Dashboard Report for last {} days for user with System ID {}
invalid.seller.id.message=Invalid seller ID for user with System ID {}: {}
country.counter.message=Country Counter for user with System ID {}: {}
sender.count.message=Sender Count for user with System ID {}: {}
user.processing.info.message=User with System ID {} - Username: {} -> Received: {}, Processed: {}, Delivered: {}
userwise.counter.message=User-wise Counter for user with System ID {}: {}
smsc.counter.message=SmscCounter for user with System ID {}: {}
smsc.deliver.message=SmscDeliver for user with System ID {}: {}
no.delivery.found.message=No Delivery Found for user with System ID {}: {}
smsc.spam.message=SmscSpam for user with System ID {}: {}
smsc.spam.count.message=Smsc Spam Count for user with System ID {}: {}
user.spam.message=UserSpam for user with System ID {}: {}
user.spam.count.message=User Spam Count for user with System ID {}: {}
finished.dashboard.message=Finished Dashboard for user with System ID {}
getting.recent.dashboard.report.message=Getting Recent Dashboard Report for user with System ID {} and Role {}
dashboard.sql.message=Dashboard SQL for user with System ID {}: {}
dashboard.report.list.size.message=Dashboard Report List Size for user with System ID {}: {}
dashboard.report.message=Getting Dashboard Report for user with System ID {} for the last {} days
user.delivery.status.message=User Delivery Status for user with System ID {}: Received: {}, Processed: {}, Delivered: {}
database.error.message=An error occurred while executing a database operation: {}
empty.error.message=An error occurred: {}

creating.docx.message=Creating DOCX for user: {}
docx.outputstream.closing.error.message=DOCX OutputStream is Closing Error

xls.outputstream.error.message=XLS OutputStream closing error for user: {}
creating.report.list.message=Creating report list for user: {}
custom.report.dto.message=Custom report DTO for user: {} - {}
report.criteria.message=Report based on criteria for user: {}
under.users.message={}: Under Users: {}
checking.report.message={} Checking Report For {}
report.sql.message={} Report SQL: {}
end.criteria.report.size.message={} End Based On Criteria. Final Report Size: {}
report.list.count.message=Report List Count: {}
missing.tables.message= <-- {} Mis & Content Table Doesn't Exist -->

preparing.report.message={} <-- Preparing report -->

jasperreports.exception.message=JasperReports Exception occurred: {}
checking.report.for.message={} Checking Report For {}
end.criteria.final.size.message=End Based On Criteria. Final Report Size: {}

error.empty.message=An error occurred.
report.users.message= {} Report Users {}
user.list.size= {} User list: {}

report.size=Report Size: {}

zip.download.start= <--  Zip Download is being starting --> 
download.start= <---- Download is getting starting -----> 
xls.download.error=lookup XlsReport Download Stream Error: {}
stream.release.error=Major Error Releasing Streams: {}

finish.message= <-- Task has been Finished --> 
prepare.outputstream= <--Outputstream is on the way for preparing --> 

pdf.outputstream.error=Error occurred while processing PDF output stream.
doc.outputstream.error=Error occurred while processing document output stream.
xls.outputstream.error=Error occurred while processing XLS output stream.

recheck.lookup.size=Rechecking Lookup Size: {}
creating.workbook.message=<<-- Creating WorkBook -->> 
creating.sheet.message=Creating Sheet: {}
sheet.created.message=Sheet has been Created: {}

workbook.created.message=<<--- Workbook has been Created ---->>
creating.pdf.message=<<-- PDF is on the way for creating -->>
creating.doc.message=<<-- DOC is on the way for creating -->>

#performance Report
profit.report.entries.message=ProfitReport Entries: {}
schedule.history.report.message=Schedule History report: {}
sql.query.error.message=Error in SQL query {}
sql.error.message=Error in SQL for user with userID {}: {}
sql.message= The SQL statemenet is: {}

creating.design.message=Creating Designs
invalid.groupby.message=Invalid Operation for GroupBy: {}
processing.report.data.message=<<-- Processing report data -->>

#Profit Report
pdf.outputstream.closing.error.message=PDF OutputStream Closing Error for user with username :{}
doc.outputstream.closing.error.message=DOC OutputStream Closing Error for user with username :{}

no.report.data.found.message=S <<-- No Report Data Found for the user with username :{} -->>
listing.profit.result.entries.message=Listing Profit Result Entries: {}
compiling.source.format.message=<<-- Compiling Source Format file -->>
preparing.chart.data.message=<<-- Preparing Chart Data -->>

compiling.message=<<--- Compiling --->
preparing.chart.message=<<-- Preparing Charts -->>

#SMSC Message
smsc.in.message=Smsc_in: {}
smscin.log.message=smscin_log: {}
smscin.record.size.message=SmscIn Record Size: {}
mis.message=mis: {}
routing.sql.message=RoutingSQL: {}

#Summary Report 
no.users.found.error=No Users Found Under the user {} [{}]
no.user.found.message={}[{}] No User Found
batch.report.requested.message={} Batch Report Requested Based On Criteria
run.summary.report.view.message=run 120 in summary report view
compiling.source.format.message=<<-- Compiling Source Format file -->>

#Submission Report 
submission.report.requested.message={} Submission Report Requested.
report.info.message={} Report Type: {} User: {} Smsc: {} Country: {} Sender: {} Status: {}
checking.mis.records.message={} Checking For MIS Records
mis.log.criteria.message=Days difference under MIS log criteria. mis_table_log will be checked.
not.mis.log.criteria.message=Days difference is not under MIS log criteria
days.difference.check.message={} while Checking days difference.
checking.mis.records.all.users.message={} Checking MIS Records For All Users
checking.mis.records.for.user.message=Checking MIS Records For: {}
no.checking.from.mis.table.message=No Checking From mis_table
submit.report.processing.message=SubmitReport Processing For: {}
sql.get.submission.report.message=SQL getSubmissionReport --> {}
difference.from.today.message={} Difference From Today: {}

#HLRSMSC Service message
hlr.smsc.entry.saved.successfully.message=HlrSmscEntry saved successfully with ID: {}
hlr.smsc.entry.save.error.message=Error occurred while saving HlrSmscEntry:{} {} 
conversion.error.message=Error occurred while converting HlrSmscEntryRequest to HlrSmscEntry: {}
conversion.success.message=Converted HlrSmscEntryRequest to HlrSmscEntry successfully
listing.error.message=Error occurred while listing HlrSmscEntries for systemId {}: {}
data.access.error.message=DataAccessError occurred while listing HlrSmscEntries for systemId {}: {}
fetch.error.message=Error occurred while fetching HlrSmscEntry with ID {}: {}
data.access.fetch.error.message=DataAccessError occurred while fetching HlrSmscEntry with ID {}: {}
hlr.smsc.entry.not.found.message=HlrSmscEntry with ID {} and systemId {} not found
delete.error.message=Error occurred while deleting HlrSmscEntry with ID {}: {}
data.access.delete.error.message=DataAccessError occurred while deleting HlrSmscEntry with ID {}: {}
delete.success.message=HlrSmscEntry with ID {} deleted successfully
entry.not.found.message=HlrSmscEntry with ID {} and systemId {} not found
update.error.message=Error occurred while updating HlrSmscEntry with ID {}: {}
data.access.update.error.message=DataAccessError occurred while updating HlrSmscEntry with ID {}: {}
update.success.message=HlrSmscEntry updated successfully with ID: {}
entry.not.found.message=HlrSmscEntry with ID {} and systemId {} not found






















































































































