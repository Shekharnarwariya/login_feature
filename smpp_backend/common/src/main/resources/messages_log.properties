# Messages for logger
#login service Exception Message
auth.successful=Authentication successful for user :{}
auth.failed.userNotFound=Authentication failed. User not found:{}
auth.failed.password=Authentication failed. Invalid password for the user:{}
log.attemptAuth=Attempting to authenticate for user:{}
log.internalServerError=Internal server error during authentication 
internal.server.error=Internal server error ,Authentication failed  :{} 

#MobileDb Service Logger message
mobileDb.enter.addMobileDbData = Entering addMobileData method
mobileDb.addDataEntry.getAge=  Add Mobile Data Age of the user is :{}
mobileDb.getUsername = Provided user name is :{}
# Message related to file format
file.format=File format: {}
# Messages related to save operation
mobileDb.saveSuccess=Successfully inserted mobile data into the database
mobileDb.saveFailure=Failed to insert mobile data into the database
mobileDb.addMobileData.exiting=Exiting addMobileData method
mobileDb.addMobileData.nullValues=One or More Values are Null or Incorrect in addMobileData Function
# Message related to showing mobile data
mobileDb.showData.mobileNumber=Mobile number received in showMobileData method:{}
mobileDb.showData.mobileNumberNotFound=Mobile number not found in the database: {}
mobileDb.showData.success=Successfully retrieved mobile data from the database
mobileDb.showData.failure=Failed to retrieve mobile data from the database
# Error message for exceptions
mobileDb.showData.exception=Error in showMobileData method: {}
# Messages related to updating mobile data list
mobileDb.updateDataList.nullArrays=One or more arrays are null in UpdateMobiledatalist  Method
mobileDb.updateDataList.success=Successfully updated mobile data list
mobileDb.updateDataList.failure=Failed to update mobile data list
mobileDb.updateDataList.noSuchElementError=Entry with given id is not present
mobileDb.updateDataList.exception=Error in updateMobileDataList method: {}
# Messages related to deleting mobile data list
mobileDb.deleteDataList.checkedC=Checked counts: {}
mobileDb.deleteDataList.success=Successfully deleted mobile data list
mobileDb.deleteDataList.failure=Failed to delete mobile data list
mobileDb.deleteDataList.noSuchElementError=Entry with given id not present
mobileDb.deleteDataList.arrayIndexOutOfBoundsError=Count of entry mobile ID and Check_Count does not match
mobileDb.deleteDataList.exception=Error in deleteMobileDataList method: {}
# Messages related to choosing mobile numbers
mobileDb.chooseRequired.smsCount=SMS Count - {}
mobileDb.chooseRequired.smsCountOutOfBounds=SMS count is out of bounds
mobileDb.chooseRequired.parseError=Error parsing integer
mobileDb.chooseRequired.sendNowSmsCountError=Send Now SMS Count is more than the number list count
mobileDb.chooseRequired.exception=Error in chooseRequired method: {}
# Messages related to editing data
mobileDb.editData.info=EditDataAction Called
mobileDb.editData.exception=Error in editData method: {}
# Messages related to getting sub-areas
mobileDb.getSubArea.info=Area - {}
mobileDb.getSubArea.subAreas=Sub Areas :: {}
mobileDb.getSubArea.subAreaDoesNotExist=Subarea Does not exist for the given area
mobileDb.getSubArea.exception=Error in getSubArea method: {}
mobileDb.mobileUserList.numberFormatException=Error parsing number: {}
mobileDb.mobileUserList.generalException=Exception in uploading number: {}
mobileDb.mobileUserList.SaveContactList=Error In Saving Multiple Conacts From List: {}

# Log messages for mobileUserList method
mobileDb.enter.mobileUserList=Entering mobileUserList method.
mobileDb.intermediate.ageRange=Age range: {}
mobileDb.intermediate.areaArrayLength=Area array length: {}
mobileDb.intermediate.subareaArrayLength=Subarea array length: {}
mobileDb.intermediate.professionArrayLength=Profession array length: {}
mobileDb.intermediate.classTypeArrayLength=ClassType array length: {}
mobileDb.intermediate.executingQuery=Executing query: {}
mobileDb.error.mobileUserList=Error in mobileUserList method: {} - {}
mobileDb.exit.mobileUserList = Exit mobileUserList Function

# Add more keys as needed for additional log messages
mobileDb.enter.mobileUserListInfo=  Entered into Mobile user List Info Function
mobileDb.success.mobileUserListInfo = Successfully fetched Data
mobileDb.failure.mobileUserListInfo= Failed to fetch Data
mobileDb.userId.queryForMobileRecord = User ID
mobileDb.webEntryOptional.queryForMobileRecord= Web Entry Reached 
mobileDb.success.queryForMobileRecord= Successfully fetched Data
mobileDb.failed.queryForMobileRecord=Failed to fetch Data
mobileDb.NumberFormatException.SendAreaWiseSms= NumberFormatException
mobileDb.finalList.SendAreaWiseSms=finalList

#bsfm logger
bsfm.add.msg={} [{}] Add Spam Profile: {}
bsfm.noUser={} [{}] No User Selected For The Operation.
bsfm.msg.error= Error Message: {}
bsfm.add.success=Bsfm Profile added successfully: {}
bsfm.failed.duplicate=Duplicate Entry Found! Failed to add Bsfm Profile: {}
bsfm.add.failed=Failed to add Bsfm Profile: {}
bsfm.req.check=Checked Request By username: {} userid: {}
bsfm.req.edit={} Edit Profile Request: {}
bsfm.invalid.network={} [{}] Invalid Network {}
bsfm.is.scheduled={} isSchedule: {}
bsfm.day.time={} day_time_token: {}
bsfm.invalid.day={} Invalid Day: {}
bsfm.invalid.schToken={} Invalid Schedule token: {}
bsfm.show.success=Bsfm profiles listed successfully for user: {}
bsfm.show.failed = No Bsfm profiles available for user: {}
bsfm.update.profile={} [{}] Update Spam Profile: {}
bsfm.invalid.daytime= {} Invalid DayTime Configured: {}
bsfm.update.success=Spam Profile updated successfully: {}
bsfm.update.failed=Failed to update Spam Profile: {}
bsfm.duplicate.profilename=Duplicate Bsfm Profile with profilename: {}
bsfm.noProfile.exist=No Bsfm Profile exists with Id: {}
bsfm.delete.error=Error deleting BsfmActiveProfile {}
bsfm.req.delete=Delete request by username: {}
bsfm.delete.success=Spam Profile deleted successfully!
bsfm.delete.failed = Failed to delete Spam Profile!
bsfm.req.updateFlag=Update Bsfm profile flag requested by: {}
bsfm.updateFlag.success=Flag value change: Success
bsfm.updateFlag.failed=Flag value change: Failure

#sales logger
sales.req.add = Sales User [{}-{}] Add Requested By {} [{}]
sales.warn.user=Usermaster Entry Exists With same Username {}
sales.add.success=Sales User Created With Id: {}. Status: {}
sales.add.failure=Unable to create Sales User: {}
sales.msg.error = Unexpected Error: {}

sales.update.req = Executive [{}] Update Requested By {} [{}]
sales.updateRequest = Update Requested: {}
sales.entry.notfound = Sales Entry not found with id: {}
sales.update.success = Sales Entry Updated successfully! Status: {}
sales.update.failure = Unable to update SalesEntry: {}
sales.req.delete= Delete Requested for Sale ID: {}
sales.operation.success = Operation successful: Sale ID {}
sales.req.list = Executive List Requested By {} [{}]
sales.list.users = Executives Under [{}] : {}
sales.list.nousers=No Executive Found Under {} | {}
sales.view.req = Executive[{}] Details Requested By {} [{}]
sales.manager.noentry = No Sales Entry Found For The Role Manager!
sales.setup.req = Sales User Setup Requested By {} [{}]

#dlt service loggers
dlt.saveDltEntry.enter=Entered in saveDltEntry
dlt.saveDltEntry.userid ={}[{}] Add DltEntry Request:{}
dlt.saveDltEntry.dltEntry=DltEntry Added:{}
dlt.saveDltEntry.success=Dlt Entry Added Successfully
dlt.saveDltEntry.error=Error Occured While Processing
dlt.saveDltEntry.dlt.saveDltEntry.DataIntegrity.error=DataIntegrity Violation Exception error Occurred
dlt.saveDltEntry.Exception.error = An error occurred while saving DltEntry to the repository {}
dlt.addDltTemplate.enter =Entered in addDltTemplate
dlt.addDltTemplate.entry ={}[{}]
dlt.addDltTemplate.systemid ={}[{}] Add Dlt Template Request:{}
dlt.addDltTemplate.firstSheet ={} Sheet[0] Total Rows:{}
dlt.addDltTemplate.Invalid =Invalid Format For Xls File
dlt.addDltTemplate.getRowNum ={}[PE_ID]Invalid Char found[{}]{}
dlt.addDltTemplate.PE_ID =Invalid PE_ID For Entry[{}]{}
dlt.addDltTemplate.Template_ID]Invalid ={}[Template_ID]Invalid Char found[{}]{}
dlt.addDltTemplate.Template_ID =Invalid Template_ID For Entry[{}]{}
dlt.addDltTemplate.invalid.template =Invalid Template For Entry[{}]{}
dlt.addDltTemplate.getRow.template ={}: peId={},templateId={},template={}
dlt.addDltTemplate.error.dltentry =An error occurred while processing DltEntry.
dlt.addDltTemplate.Request.template ={}[{}]Add Dlt Template Request:{}
dlt.addDltTemplate.empty.template =<--- Dlt Templates empty -->
dlt.addDltTemplate.entries.template = Dlt Template entries:{}
dlt.addDltTemplate.Inserted.template =Dlt Template Inserted:{}
dlt.addDltTemplate.Successfully.template =Data Added to List Successfully
dlt.addDltTemplate.userRole.template ={}[] Add Dlt Template Target:{}
dlt.listDltEntry.enter =Entered in listDltEntry
dlt.listDltEntry.DltEntry ={}[{}]list DltEntry Request
dlt.listDltEntry.List = DltEntry List:{}
dlt.listDltEntry.DltEntry.target ={}[{}] list DltEntry Target:{}
dlt.listDltEntry.error =No data is Avaliable in the template list
dlt.listDltTemplate.enter=Entered in listDltTemplate
dlt.listDltTemplate.Template.request={}[{}]list Dlt Template Request
dlt.listDltTemplate.Template.list=Dlt Template List:{}
dlt.listDltTemplate.Template.Target={}[{}] list Dlt Template Target: {}
dlt.listDltTemplate.noRecord=No Record Avaliable
dlt.updateDltEntry.enter=Entered in updateDltEntry
dlt.updateDltEntry.Update.userDetail={}[{}] Update DltEntry Request:{}
dlt.updateDltEntry.success=Entry Updated Successfully
dlt.updateDltEntry.Target={}[{}] Update DltEntry Target:{}
dlt.updateDltTemplate.enter=Entered in updateDltTemplate
dlt.updateDltTemplate.Template.user={}[{}] Update Dlt Template Request: {}
dlt.updateDltTemplate.success=Template Updated Successfully 
dlt.updateDltTemplate.Target={}[{}] Update Dlt Template Target:{}
dlt.deleteDltEntry.success=Entry Deleted Successfully
dlt.deleteDltTemplate.success = Template Deleted Successfully
dlt.deleteDltTemplate.target = {}[{}] Remove Dlt Template Target:{}
dlt.getDltEntry.DltEntry = {}[{}] View DltEntry Request:{}
dlt.getDltEntry.target = {}[{}]  View DltEntry Target::{}
dlt.getDltTemplate.Request = {}[{}] View Dlt Template Request::{}
dlt.getDltTemplate.Target = {}[{}]  View Dlt Template Target::{}

#template
add.template.req=Add Template Request By userId: {} Title: {} Message: {}
process.error=Process Error: {} [{}]
add.template.success=Add Template Request Successful by userId: {} Title: {} Message: {}
processing.error=Processing Error
get.template.req=Get Template Request By userId: {} Template Id: {}
get.template.success=Get Template Request Successful By userId: {} Template Id: {}
error.processing.template=Error Processing Template by id: {}
get.all.templates.req=Get All Templates Requested by userId: {}
error.processing.templates=Error processing templates: {}
get.all.templates.success=Get all templates request successful for userId: {}
error.processing.get.all.templates=Error Processing Request for Get All Templates.
update.template.req=Update template request by userId: {} title: {} message: {}
no.template.to.update=No template to update for userId: {}
update.template.success=Update Template Request Successful: {} Title: {} Message: {}
delete.template.info=userId: {} delete templateId: {}
template.deleted.success=Template deleted successful with id: {}
delete.template.error=Delete templateId: {} <-- No template to delete -->
recent.use.template.success=RecentUseTemplate operation succeeded for user: {}
unexpected.error=An unexpected error occurred: {} {} 

#subscription logger
subscription.add.req = Add Subcription page Request By {} Name: {} Sender: {}
subscription.header.upload = {} Header File Uploaded: {}
subscription.header.created = {} Header File Created: {}
subscription.footer.upload = {} Footer File Uploaded: {}
subscription.footer.created = {} Footer File Created: {}
subscription.invalid.cc = {} Invalid Country Code: {}
subscription.saved.success = Subscription Entry Saved Successfully!
subscription.saved.failure = Error saving subscription entry
subscription.contact.failure = Process Error: Contact Group not created!
subscription.dir.created =Subscription Directory Created!
subscription.file.saved = File saved successfully at: {}
subscription.file.deleted = File deleted successfully: {}
subscription.file.notexist = File does not exist: {}
subscription.view.req = View Subcription Page[{}] Request By {}
subscription.msg.noentry = {} --No Subscription Entry found."
subscription.msg.found = {} Subscribe Entry Found: {}
subscription.msg.error = Error Message: {}
subscription.req.list=List Subcription page Request By {}
subscription.entries= {} Subscribe Entries: {}
subscription.req.update = Update Subcription Page[{}] Request By {}
subscription.update.success = Subscribe Entry Updated Successfully!
subscription.update.failed = Failed Updating SubscribeEntry!
subscription.req.delete = Delete Subcription Page[{}] Request By {}
subscription.delete.success = Subscribe Entry Deleted Successfully!



