package com.hti.smpp.addressbook.impl;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;

import com.hti.smpp.addressbook.request.GroupEntryRequest;
import com.hti.smpp.addressbook.services.GroupEntryService;
import com.hti.smpp.addressbook.utils.Converters;
import com.hti.smpp.common.contacts.dto.GroupEntry;
import com.hti.smpp.common.contacts.repository.GroupEntryDTORepository;
import com.hti.smpp.common.contacts.repository.GroupEntryRepository;
import com.hti.smpp.common.user.dto.UserEntry;
import com.hti.smpp.common.user.repository.UserEntryRepository;
import com.hti.smpp.common.util.IConstants;

public class GroupEntryServiceImpl implements GroupEntryService{
	
	@Autowired
	private GroupEntryDTORepository groupEntryDTORepository;
	
	@Autowired
	private UserEntryRepository userRepository;
	

	@Override
	public ResponseEntity<?> saveGroupEntry(GroupEntryRequest form, String username) {
		
		String systemId = null;
		// Finding the user by system ID
		Optional<UserEntry> userOptional = userRepository.findBySystemId(username);
		if (userOptional.isPresent()) {
			systemId = userOptional.get().getSystemId();
		}
		String target = IConstants.FAILURE_KEY;
		GroupEntry entry = null;
		int total = form.getName().length;
		List<GroupEntry> list = new ArrayList<GroupEntry>();
		String[] names = form.getName();
		try {
			for (int i = 0; i < total; i++) {
				entry = new GroupEntry();
				if (names[i] != null && names[i].length() > 0) {
					entry.setName(new Converters().UTF16(names[i]));
					entry.setGroupData(groupData[i]);
					entry.setMasterId(systemId);
					if (userSessionObject.getWebMasterEntry().isMultiUserAccess()
							&& userSessionObject.getMultiUsername() != null
							&& userSessionObject.getMultiUsername().length() > 0) {
						entry.setCreatedBy(userSessionObject.getMultiUsername());
					} else {
						entry.setCreatedBy(systemId);
					}
					list.add(entry);
					logger.info(entry.toString());
				} else {
					logger.info(systemId + "[" + role + "]" + " Invalid Group Name: " + names[i]);
					continue;
				}
			}
			if (list.isEmpty()) {
				logger.info(systemId + "[" + role + "]" + " No Valid Entry Found! ");
				message = new ActionMessage("message.operation.failed");
			} else {
				GlobalVars.contactService.saveGroup(list);
				message = new ActionMessage("message.operation.success");
				target = IConstants.SUCCESS_KEY;
			}
		} catch (Exception e) {
			message = new ActionMessage("Process Error: " + e.getMessage() + "[" + e.getCause() + "]", false);
			logger.error(systemId, e);
		}
		logger.info(systemId + " Add Contact Group Target:" + target);
		messages.add(ActionMessages.GLOBAL_MESSAGE, message);
		return null;
	}
	
	

}
